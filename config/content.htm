<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h2>W10</h2>
<p>12354646</p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h2>test 試推</h2>
<h1>HW1</h1>
<h2>CH5</h2>
<h3>43頁 中英文版</h3>
<p id="N10686" lang=""><span>在本課程中，我們將介紹主板的用途和功能。我們還將介紹中央處理器（CPU）和為CPU提供專門功能的各種技術，例如虛擬化，超線程和多核處理器。最後，我們將介紹可用的各種CPU冷卻方法，例如主動和被動散熱器以及液體冷卻。</span></p>
<p id="N10689" lang=""><span><span>主板是計算機的基礎。</span><span>主板就像一個街區，公交車就像街道。</span><span>這些組件就像城市中的建築物，因此，如果您要從一棟建築物轉到另一棟建築物（或者在我們的情況下，如果我們希望信息從一個組件流向另一組件），則它必須穿越公交車（街道） ）。</span><span>總線是物理上將主板的各個組件彼此連接的總線，允許信息流入和流出各個計算機組件。</span><span>主板具有各種形狀，大小和佈局。</span><span>主板的特定形狀，大小和佈局稱為其外形尺寸。</span><span>主板是最重要的計算機組件之一，因為其他所有組件都插入主板中，</span><span>插入專用插槽（例如CPU），擴展槽（用於各種擴展卡）或連接器（例如SATA存儲設備和音頻輸入/輸出）中。</span><span>主板確實是計算機中所有組件的主要集合點。</span></span></p>
<div class="imagewrap"><span class="image"><img alt="主板的照片。" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image1.png" title="主板的照片。"/></span><span class="caption" lang=""><span><span>母板。</span><span>照片由</span></span><a href="https://flic.kr/p/tyfRP" id="_i_1" lang="" target="_blank"><span><span>John Bullas</span></span></a><span><span>根據CC-BY-NC-ND許可使用<span> </span></span><span>。</span></span></span></div>
<p id="N10699" lang=""><span><span>在開始討論主板本身之前，我們希望對可以連接到主板的各種組件有基本的了解。</span><span>在以後的課程中，我們將詳細介紹這些組件中的每一個，但讓我們看一下主板上的一些關鍵組件。</span></span></p>
<div class="imagewrap"><span class="image"><img class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image2.jpeg"/></span><span class="caption" lang=""><span><span>主板圖。</span><span>版權所有：</span></span><a href="http://www.123rf.com/profile_hipspeeds" id="_i_3" lang="" target="_blank"><span><span>hipspeeds / 123RF股票照片</span></span></a></span></div>
<p id="N106A6" lang=""><span><span>查看上面的主板圖，其中標識了特定的組件。</span><span>讓我們更仔細地檢查每個組件：</span></span></p>
<table align="center" cellspacing="0" class="wbtable" lang="">
<tbody>
<tr class="e">
<td lang=""><span><span>組件名稱</span></span></td>
<td lang=""><span><span>功能</span></span></td>
</tr>
<tr>
<td lang=""><span><span>PCI擴充插槽</span></span></td>
<td lang=""><span><span>這些使我們能夠為計算機添加功能，例如額外的USB端口，新的聲卡，調製解調器或網卡等。</span><span>這是一個通用卡插槽，所有製造商都可以在使用通用規範構建卡時使用。</span></span></td>
</tr>
<tr class="e">
<td lang=""><span><span>PCIe x1（PCI Express大小1）插槽</span></span></td>
<td lang=""><span><span>該特定的主板具有其中三個插槽，但是根據其特定的外形尺寸，不同的主闆對此有所不同。</span><span>這些是較新的插槽，比舊的PCI插槽快得多。</span><span>PCIe代表PCI Express，x1表示存在一個專用的串行數據連接（通道）。</span><span>PCIe具有多種尺寸，例如x1，x4，x8和x16。</span></span></td>
</tr>
<tr>
<td lang=""><span><span>PCIe x16（PCI Express尺寸16）插槽</span></span></td>
<td lang=""><span><span>這些是較新的插槽，比舊的PCI插槽快得多。</span><span>PCIe代表PCI Express，x16表示有16個串行通道。</span><span>PCIe具有多種尺寸，例如x1，x4，x8和x16。</span></span></td>
</tr>
<tr class="e">
<td lang=""><span><span>後置輸入/輸出集群</span></span></td>
<td lang=""><span><span>每個主板都可以提供專用的集成功能，例如網卡，聲卡，視頻卡以及各種輸入/輸出端口，這些功能都“聚集”在板上。</span><span>這些組件已焊接到主板上，因此無法更改。</span></span></td>
</tr>
<tr>
<td lang=""><span><span>CPU插槽</span></span></td>
<td lang=""><span><span>CPU插槽是插入中央處理器（計算機的大腦）的位置。</span></span></td>
</tr>
<tr class="e">
<td lang=""><span><span>內存插槽</span></span></td>
<td lang=""><span><span>這些插槽是在其中插入額外的隨機存取存儲器（RAM）以便為計算機提供容量的位置。</span></span></td>
</tr>
<tr>
<td lang=""><span><span>24針主電源連接器</span></span></td>
<td lang=""><span><span>這個24針主電源連接器為整個主板供電。</span></span></td>
</tr>
</tbody>
</table>
<p><br/><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" enablejsapi="1" frameborder="0" height="360" id="_i_4" src="https://www.youtube.com/embed/Q7A9z33Qj7M?enablejsapi=1&amp;rel=0&amp;vq=large" width="640"></iframe></p>
<h3>43頁英文版</h3>
<p id="N10686" lang="">In this lesson, we will cover the purpose and function of the motherboard. We will also cover central processing units (CPUs) and the various technologies that exist to provide specialized functionality for CPUs, such as virtualization, hyperthreading, and multicore processors. Finally, we will cover the various methods of CPU cooling available, such as active and passive heat sinks, as well as liquid cooling.</p>
<p id="N10689" lang="">Motherboards are the foundation of the computer. The motherboard acts like a city block and the bus is like the streets. The components are like the buildings in the city, so that if you want to go from one building to another (or in our case if we want information to flow from one component to another), it has to travel across the bus (the streets). The bus is what physically connects the various components of the motherboard to each other, allowing information to flow into and out of the various computer components. Motherboards come in a variety of shapes, sizes, and layouts; the specific shape, size, and layout of a motherboard is called its form factor. The motherboard is one of the most important computer components, since every other component plugs into the motherboard, either into a dedicated socket (such as the CPU), an expansion slot (used for various expansion cards), or a connector (such as SATA storage devices and audio inputs/outputs). The motherboard truly is the central meeting point for all the components in the computer.</p>
<div class="imagewrap"><span class="image"><img alt="Photograph of a motherboard." class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image1.png" title="Photograph of a motherboard."/></span><span class="caption" lang="">Motherboard. Photo used under CC-BY-NC-ND license from<span> </span><a href="https://flic.kr/p/tyfRP" id="_i_1" lang="" target="_blank">John Bullas</a>.</span></div>
<p id="N10699" lang="">Before we begin talking about the motherboard itself, we want to have a basic understanding of the various components that can connect to the motherboard. We will go into detail on each of these components in future lessons, but let’s take a look at some of the key components on a motherboard.</p>
<div class="imagewrap"><span class="image"><img class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image2.jpeg"/></span><span class="caption" lang="">Diagram of a motherboard. Copyright:<span> </span><a href="http://www.123rf.com/profile_hipspeeds" id="_i_3" lang="" target="_blank">hipspeeds / 123RF Stock Photo</a></span></div>
<p id="N106A6" lang="">Look at the figure above of a motherboard, with specific components identified. Let’s examine each component more closely:</p>
<table align="center" cellspacing="0" class="wbtable" lang="">
<tbody>
<tr class="e">
<td lang="">Component Name</td>
<td lang="">Function</td>
</tr>
<tr>
<td lang="">PCI expansion slots</td>
<td lang="">These allow us to add capabilities to our computers, such as extra USB ports, a new sound card, a modem or network card, and many others. This is a universal card slot that all manufacturers can use when building their cards using a common specification.</td>
</tr>
<tr class="e">
<td lang="">PCIe x1 (PCI express size 1) slot</td>
<td lang="">This particular motherboard has three of these slots, but this varies from board to board based on its particular form factor. These are the newer slots that are much faster than the older PCI slot. PCIe stands for PCI express, and the x1 indicates that there is one dedicated serial data connection (lane). PCIe comes in a variety of sizes, such as x1, x4, x8, and x16.</td>
</tr>
<tr>
<td lang="">PCIe x16 (PCI express size 16) slot</td>
<td lang="">These are newer slots that are much faster than the older PCI slot. PCIe stands for PCI express, and the x16 indicates that there are 16 serial lanes. PCIe comes in a variety of sizes, such as x1, x4, x8, and x16.</td>
</tr>
<tr class="e">
<td lang="">Rear input/output cluster</td>
<td lang="">Each motherboard can offer dedicated, integrated features, such as network cards, sound card, video cards, and a variety of input/output ports all “clustered” together on the board. These components cannot be changed out since they are soldered to the motherboard.</td>
</tr>
<tr>
<td lang="">CPU socket</td>
<td lang="">The CPU socket is where the central processing unit (the brains of the computer) is inserted.</td>
</tr>
<tr class="e">
<td lang="">Memory slots</td>
<td lang="">These slots are where extra random access memory (RAM) is inserted to provide capacity to the computer.</td>
</tr>
<tr>
<td lang="">24-pin main power connector</td>
<td lang="">This 24-pin main power connector is what powers the entire motherboard.</td>
</tr>
</tbody>
</table>
<p><br/><br/><br/><br/><br/><br/><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" enablejsapi="1" frameborder="0" height="360" id="_i_4" src="https://www.youtube.com/embed/Q7A9z33Qj7M?enablejsapi=1&amp;rel=0&amp;vq=large" width="640"></iframe></p>
<h3>44頁中英版</h3>
<p id="N10688" lang=""><span>擴展插槽可用於計算機系統的其他功能。擴展卡已插入擴展槽。主板上有許多不同類型的擴展插槽。這些類型的插槽中的每一種的功能將在以後的模塊中進行更詳細的討論。以下是最常見的擴展插槽類型的簡要概述。</span></p>
<ul lang="">
<li lang=""><span><span>PCI —傳統的外圍組件互連插槽，通常使用其縮寫詞來指代。</span></span></li>
<li lang=""><span><span>PCI-X — PCI插槽的更快的64位版本，以133 MHz的總線速度運行。</span></span></li>
<li lang=""><span><span>AGP —專用於與共享PCI總線分開的專用圖形通道（總線）。</span><span>這使得3D遊戲設計，硬件加速和視頻播放方面有了進步。</span></span></li>
<li lang=""><span><span>PCIe — PCI Express的速度超過了AGP的速度，並且PCIe為所有設備提供了單個插槽類型。</span></span></li>
<li lang=""><span><span>AMR —音頻調製解調器轉接卡是一種特殊類型的卡，用於將其他卡裝入緊湊的空間。</span></span></li>
<li lang=""><span><span>CNR —通信網絡轉接卡取代了AMR，並在轉接卡上支持六通道數字音頻，網絡功能和其他高質量的集成音頻支持。</span></span></li>
</ul>
<div class="section" id="chipset">
<div class="sectionContain">
<p id="N106A8" lang=""><span><span>芯片組確定係統可以使用的CPU，系統提供的集成端口以及主板中包含的擴展插槽的類型。</span><span>主板的尺寸決定了特定的尺寸，形狀和佈局，而芯片組則決定了將哪些技術集成到主板本身中。</span><span>每個芯片組都定義了內存控制器，並指定了主板可以使用哪種RAM。</span><span>這包括要使用的RAM的類型（DDR，DDR2，DDR3等）和RAM的速度（10600、1333 MHz等）。</span><span>主板在技術上分為“北橋”和“南橋”，將在下一節中進一步討論。</span><span>該芯片組由製造商設計，如果不更換整個主板，最終用戶將無法升級或更改。</span><span>因此，在購買滿足您需求的主板和芯片組之前，請務必謹慎選擇。</span></span></p>
<div class="imagewrap"><span class="image"><img alt="具有確定的北橋和南橋的主板。" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image5.png" title="具有確定的北橋和南橋的主板。"/></span><span class="caption" lang=""><span><span>具有確定的北橋和南橋的主板。</span><span>照片由</span></span><a href="https://flic.kr/p/5u8Phm" id="_i_1" lang="" target="_blank"><span><span>George Austin</span></span></a><span><span>根據CC-BY-SA許可使用</span><span>。</span></span></span></div>
</div>
</div>
<div class="section" id="N106BB">
<div class="sectionContain">
<p id="N106C2" lang=""><span><span>北橋有幾個名字。</span><span>第一個也是最常見的是內存控制器中樞（MCH），但也可以稱為Intel主板上具有集成顯卡的圖形內存控制器中樞（GMCH）。</span><span>北橋用作CPU和內存庫（RAM），PCIe x16，AGP圖形擴展插槽以及其他高速組件之間的連接。</span><span>從本質上講，CPU的運行速度非常快（例如3 GHz或更高的速度），並且計算機周圍的各種組件無法以如此快的速度運行。</span><span>北橋充當緩衝區，以保持高速設備向CPU提供信息。</span><span>雖然內存可以在1至2 GHz範圍內運行，但它與CPU之間仍然存在延遲。</span></span></p>
</div>
</div>
<div class="section" id="N106C7">
<div class="sectionContain">
<p id="N106CE" lang=""><span><span>南橋被稱為輸入/輸出控制器集線器（ICH）。</span><span>南橋用作CPU和計算機低速組件之間的連接。</span><span>例如，與CPU相比，硬盤以非常慢的速度運行，但是來自用戶（來自鍵盤和鼠標）的輸入發生的速度甚至比硬盤慢。</span><span>ICH整合了大容量存儲設備，DVD / CD驅動器，硬盤驅動器，軟盤驅動器，USB端口，PCI擴展插槽，CMOS和端口群集的輸入/輸出的輸入，然後將該信息從南橋傳遞到北橋，然後到CPU進行處理。</span></span></p>
</div>
</div>
<div class="imagewrap"><span class="image"><img class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image20.png"/></span><span class="caption" lang=""><span><span>主板圖。</span><span>根據</span></span><a href="https://en.wikipedia.org/wiki/Motherboard#/media/File:Motherboard_diagram.svg" id="_i_3" lang="" target="_blank"><span><span>Wikipedia的</span></span></a><span><span>CC-BY-SA許可使用的圖片</span></span></span></div>
<div class="imagewrap"><span class="caption" lang=""><span><span></span></span></span></div>
<h3>44頁英文版</h3>
<p id="N10688" lang="">Expansion slots allow for additional functionality of the computer system. An expansion card is inserted into the expansion slot. There are many different types of expansion slots on a motherboard. The function of each of these types of slots will be discussed in far greater detail in a future module. Below is a brief summary of the most common types of expansion slots.</p>
<ul lang="">
<li lang="">PCI — The conventional peripheral component interconnect slot, commonly referred to using its acronym.</li>
<li lang="">PCI-X — A faster, 64-bit version of the PCI slot running at a bus speed of 133 MHz.</li>
<li lang="">AGP — A dedicated graphics channel (bus) designed to be separate from the shared PCI bus. This allowed advances in 3D game design, hardware acceleration, and video playback.</li>
<li lang="">PCIe — PCI express speeds exceed AGP speeds, and PCIe provides a singular slot type for all devices.</li>
<li lang="">AMR — The audio modem riser card is a specific type of card used to fit additional cards into a compact space.</li>
<li lang="">CNR — The communications network riser replaced the AMR, and allows for six-channel digital audio, networking functions, and other high-quality integrated audio support on a riser card.</li>
</ul>
<div class="section" id="chipset">
<div class="sectionContain">
<p id="N106A8" lang="">The chipset determines which CPUs a system can use, which integrated ports a system provides, and the type of expansion slots included in the motherboard. Where the motherboard’s form factor dictates the specific size, shape, and layout, the chipset determines what technologies are integrated into the board itself. Each chipset defines the memory controller, and specifies what kind of RAM can be used with the motherboard. This includes the type of RAM to be used (DDR, DDR2, DDR3, etc.) and the speed of the RAM (10600, 1333 MHz, etc.). The motherboard is broken down technologically into the “northbridge” and the “southbridge,” which will be discussed further in the next section. The chipset is designed by the manufacturer and cannot be upgraded or changed by the end user without replacing the entire motherboard. Therefore, it is important to carefully choose your motherboard and chipset before purchasing one that will meet your needs.</p>
<div class="imagewrap"><span class="image"><img alt="Motherboard with identified northbridge and southbridge." class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image5.png" title="Motherboard with identified northbridge and southbridge."/></span><span class="caption" lang="">Motherboard with identified northbridge and southbridge. Photo used under CC-BY-SA license from<span> </span><a href="https://flic.kr/p/5u8Phm" id="_i_1" lang="" target="_blank">George Austin</a>.</span></div>
</div>
</div>
<div class="section" id="N106BB">
<div class="sectionContain">
<p id="N106C2" lang="">The northbridge is known by several names. The first, and most common, is the memory controller hub (MCH), but it can also be called the graphics memory controller hub (GMCH) on Intel motherboards with integrated graphics on the motherboard. The northbridge serves as a connection between the CPU and the memory banks (RAM), PCIe x16, AGP graphics expansion slots, and other high-speed components. Essentially, the CPU operates extremely fast (such as in the 3 GHz or higher speeds), and the various components around the computer cannot operate as fast. The northbridge acts as a buffer to keep the high-speed devices feeding information to the CPU. While the memory may operate in the 1 to 2 GHz range, there is still lag between it and the CPU. The northbridge consolidates all of the high-speed inputs in order to maximize the efficiency of the CPU.</p>
</div>
</div>
<div class="section" id="N106C7">
<div class="sectionContain">
<p id="N106CE" lang="">The southbridge is known as the input/output controller hub (ICH). The southbridge serves as a connection between the CPU and the low-speed components of the computer. For example, the hard disk operates at very slow speeds in comparison to the CPU, but the input from the user (from the keyboard and mouse) occurs at even a slower rate than the hard disk. The ICH consolidates the input from the mass storage devices, DVD/CD drives, hard disk drives, floppy drives, USB ports, PCI expansion slots, CMOS, and the port cluster’s input/output, and then passes that information from the southbridge to the northbridge, and then on to the CPU for processing. This process maximizes the efficiency of the CPU’s ability to process data by removing the wait time for slower components on the southbridge and keeping the CPU processing other data during idle cycles.</p>
</div>
</div>
<div class="imagewrap"><span class="image"><img class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image20.png"/></span><span class="caption" lang="">Motherboard diagram. Image used under CC-BY-SA license from<span> </span><a href="https://en.wikipedia.org/wiki/Motherboard#/media/File:Motherboard_diagram.svg" id="_i_3" lang="" target="_blank">Wikipedia</a>.</span></div>
<p><br/><br/><br/><br/><br/><br/><br/><iframe allowfullscreen="allowfullscreen" enablejsapi="1" frameborder="0" height="360" id="_i_4" src="https://www.youtube.com/embed/Fk9LkGhyH-0?enablejsapi=1&amp;rel=0&amp;vq=large" width="640"></iframe></p>
<h3>45頁中英文版</h3>
<p lang="">主板還包含用於為計算機系統提供其他配置選項的引腳。這些針腳可以用跨接器設備覆蓋，該跳線器是具有金屬內部的塑料件，在一組針腳之間建立電連接。跳線允許在主板上啟用或禁用特定功能。</p>
<div class="imagewrap"><span class="image"><img alt="三個金色的主板插針，其中兩個被藍色跳線塊覆蓋。" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image6.jpeg" title="三個金色的主板插針，其中兩個被藍色跳線塊覆蓋。"/></span><span class="caption" lang=""><span><span>藍色跳線塊。</span><span>經許可使用。</span><span>版權所有：</span></span><span><span><a href="http://www.123rf.com/profile_nomadsoul1" id="_i_1" lang="" target="_blank">nomadsoul1 / 123RF股票照片</a></span></span></span></div>
<div class="section" id="N10696">
<div class="sectionContain">
<p id="N1069D" lang=""><span><span>每個主板都有幾個風扇連接器，特別是CPU風扇和機箱風扇。</span><span>這些連接器從主板為風扇供電（最終從電源到主板的主電源連接器，再向風扇本身供電）。</span><span>一些較新的主板可以提供PC運行狀況，例如風扇速度，風扇功率，板溫度和其他統計信息。</span><span>大多數機箱風扇連接器只有三個引腳，但是CPU風扇連接器可以具有四個引腳，其中一個引腳專用於速度控制。</span><span>然後，可以根據CPU和主板的溫度來增加或減少風扇速度。</span><span>隨著溫度升高，將發送信號以提高速度控制，從而降低CPU和主板的溫度。</span></span></p>
<div class="imagewrap"><span class="image"><img alt="主板的照片有愛好者的。 從風扇中出來的是一束黃色，黑色和紅色的電纜。 電纜束末端的連接器為紅色，已插入母板上的連接器。" class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image7.png" title="主板的照片有愛好者的。 從風扇中出來的是一束黃色，黑色和紅色的電纜。 電纜束末端的連接器為紅色，已插入母板上的連接器。"/></span><span class="caption" lang=""><span><span>CPU風扇已連接至主板。</span></span><a href="https://flic.kr/p/3jUYVE" id="_i_3" lang="" target="_blank"><span><span>RJP的</span></span></a><span><span>CC-BY許可下使用的照片</span><span>。</span></span></span></div>
<div class="imagewrap"><span class="image"><img alt="帶有機箱風扇連接器的主板用紅色圓圈標識。 機箱風扇連接器是一個小的四針連接，位於主板上的內存插槽附近。" class="popimg" id="_i_4" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image8.png" title="帶有機箱風扇連接器的主板用紅色圓圈標識。 機箱風扇連接器是一個小的四針連接，位於主板上的內存插槽附近。"/></span><span class="caption" lang=""><span><span>機箱風扇連接器。</span><span>圖片由</span></span><a href="https://flic.kr/p/KwXaU" id="_i_5" lang="" target="_blank"><span><span>Lance Fischer</span></span></a><span><span>根據CC-BY-SA許可使用</span><span>。</span></span></span></div>
</div>
</div>
<div class="section" id="N106BA">
<div class="sectionContain">
<p id="N106C1" lang=""><span><span>主板還包含音頻設備的接口，例如輔助輸入或CD播放。</span><span>某些機箱的正面配有耳機和麥克風的音頻插孔；</span><span>這些功能需要從機箱正面到主板上的音頻連接器的電纜。</span><span>主板上的另一個連接器可能是Sony / Philips數字交換格式（SPDIF），該連接器從主板連接到SPDIF光學連接器（稱為接頭）。</span><span>這些不同的音頻連接器在主板上看起來相同，通常僅通過主板上端口的標記來區分。</span><span>它們通常位於主板的邊緣之一上。</span></span></p>
<div class="imagewrap"><span class="image"><img alt="一個小的主板的照片有兩個連接器的。 一個是帶有黃色電纜的紅色視頻輸出連接器。 另一個是USB SPDIF連接器。 這是一個小金屬盒。 盒子中插入的是紫色USB電纜。" class="popimg" id="_i_6" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image9.jpeg" title="一個小的主板的照片有兩個連接器的。 一個是帶有黃色電纜的紅色視頻輸出連接器。 另一個是USB SPDIF連接器。 這是一個小金屬盒。 盒子中插入的是紫色USB電纜。"/></span><span class="caption" lang=""><span><span>小型主板，帶USB SPDIF連接器（金屬和紫色電纜）和視頻輸出連接器（紅色和黃色電纜）。</span></span><a href="https://www.flickr.com/photos/eta4ever/" id="_i_7" lang="" target="_blank"><span><span>eta 4 ever</span></span></a><span><span>在CC-BY-NC許可下使用的照片</span><span>。</span></span></span></div>
</div>
</div>
<div class="section" id="front_panel">
<div class="sectionContain">
<p id="N106DA" lang=""><span><span>下圖顯示了前面板連接器以及各種彩色電纜。</span><span>通過連接器，母板可以從電源開關，電源LED指示燈，硬盤驅動器活動指示燈，重置按鈕和機箱揚聲器（如果已安裝）發送/接收信息。</span><span>連接器通常分組在主板的前邊緣，並且往往很小且難以安裝。</span><span>通常，技術人員將不得不使用鑷子將其連接到插頭。</span><span>在計算機內進行其他工作時，很容易意外拔下這些連接器，因此，最好在更換護蓋之前重新檢查這些連接。</span><span>例如，如果計算機無法開機，則可能不是電源問題，</span><span>可能只是“電源開關”前面板連接器已拔出。</span><span>如果電源開關未完全插入主板，則計算機將無法打開。</span></span></p>
<div class="imagewrap"><span class="image"><img alt="前面板連接器是由各種彩色的小型彩色電纜組成的連接器，它們插入主板邊緣附近的插槽中。" class="popimg" id="_i_8" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image10.png" title="前面板連接器是由各種彩色的小型彩色電纜組成的連接器，它們插入主板邊緣附近的插槽中。"/></span><span class="caption" lang=""><span><span>前面板連接器。</span><span>由</span></span><a href="https://flic.kr/p/b8k2iH" id="_i_9" lang="" target="_blank"><span><span>World / In / My / Eyes</span></span></a><span><span>經CC-BY-ND許可使用的照片</span><span>。</span></span></span></div>
<div><br/><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" enablejsapi="1" frameborder="0" height="360" id="_i_10" src="https://www.youtube.com/embed/I7zpen6GerQ?enablejsapi=1&amp;rel=0&amp;vq=large" width="640"></iframe></div>
<div>
<div class="youtube">
<h3>45頁英文版</h3>
<p lang="">The motherboard also contains pins that provide additional configuration options to the computer system. These pins can be covered by a jumper device, a piece of plastic with a metallic interior that makes an electrical connection between a set of pins. The jumper allows for particular features to be enabled or disabled on the motherboard.</p>
<div class="imagewrap"><span class="image"><img alt="Three gold-colored motherboard pins, two of which are    covered by a blue jumper block." class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image6.jpeg" title="Three gold-colored motherboard pins, two of which are    covered by a blue jumper block."/></span><span class="caption" lang="">Blue jumper block. Used with permission. Copyright:<span> </span><a href="http://www.123rf.com/profile_nomadsoul1" id="_i_1" lang="" target="_blank">nomadsoul1 / 123RF Stock Photo</a></span></div>
<div class="section" id="N10696">
<div class="sectionContain">
<p id="N1069D" lang="">Each motherboard has several connectors for fans, specifically for the CPU fan and the case fan. These connectors provide power to the fans from the motherboard (ultimately from the power supply to the main motherboard power connector, then to the fans themselves). Some newer motherboards can provide PC health status, such as the fan speed, fan power, the board temperature, and other statistics. Most case fan connectors only have three pins, but the CPU fan connector can have four pins, with one pin dedicated to speed control. The fan speed can then be increased or decreased depending on the temperature of the CPU and the motherboard. As the temperature rises, a signal is sent to increase speed control, which in turn cools down the CPU and motherboard.</p>
<div class="imagewrap"><span class="image"><img alt="Photograph of motherboard with fan. Coming out of      the fan are a bundle of cables, yellow, black and red. The connector at the end      of the cable bundle is red and is plugged into the connector on the      motherboard." class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image7.png" title="Photograph of motherboard with fan. Coming out of      the fan are a bundle of cables, yellow, black and red. The connector at the end      of the cable bundle is red and is plugged into the connector on the      motherboard."/></span><span class="caption" lang="">CPU fan connected to motherboard. Photo used under CC-BY license from<span> </span><a href="https://flic.kr/p/3jUYVE" id="_i_3" lang="" target="_blank">RJP</a>.</span></div>
<div class="imagewrap"><span class="image"><img alt="Motherboard with case fan connector identified by a red circle. The case      fan connector is a small, four-pin connection located adjacent to the memory      slots on the board." class="popimg" id="_i_4" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image8.png" title="Motherboard with case fan connector identified by a red circle. The case      fan connector is a small, four-pin connection located adjacent to the memory      slots on the board."/></span><span class="caption" lang="">Case fan connector. Photo used under CC-BY-SA license from<span> </span><a href="https://flic.kr/p/KwXaU" id="_i_5" lang="" target="_blank">Lance Fischer</a>.</span></div>
</div>
</div>
<div class="section" id="N106BA">
<div class="sectionContain">
<p id="N106C1" lang="">Motherboards also contain connectors for audio devices, such as auxiliary input or CD playback. Some cases feature audio jacks for headphones and microphones on the front of the case; these features require a cable that runs from the case front to the audio connector on the motherboard. Another connector on the motherboard may be for the Sony/Philips digital interchange format (SPDIF) that is connected from the motherboard to an optical SPDIF connection, known as a header. These various audio connectors look the same on the motherboard and are usually only distinguished by the labeling of the ports on the motherboard. They are typically located on one of the edges of the motherboard.</p>
<div class="imagewrap"><span class="image"><img alt="Photograph of a small motherboard with two connectors. One is a red      video out connector with a yellow cable attached. The other is a USB SPDIF      connector. It is a small metal box. Inserted into the box is a purple USB      cable." class="popimg" id="_i_6" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image9.jpeg" title="Photograph of a small motherboard with two connectors. One is a red      video out connector with a yellow cable attached. The other is a USB SPDIF      connector. It is a small metal box. Inserted into the box is a purple USB      cable."/></span><span class="caption" lang="">Small motherboard with USB SPDIF connector (metal with purple cable) and video out connector (red with yellow cable). Photo used under CC-BY-NC license by<span> </span><a href="https://www.flickr.com/photos/eta4ever/" id="_i_7" lang="" target="_blank">eta 4 ever</a>.</span></div>
</div>
</div>
<div class="section" id="front_panel">
<p id="N106DA" lang="">The front panel connectors are shown in the image below with the various multicolored cables. The connectors allow the motherboard to send/receive information from the power switch, power LED light, hard drive activity light, reset button, and case speaker (if installed). The connectors are often grouped on the front edge of the motherboard, and tend to be small and difficult to install. Often, a technician will have to use tweezers to connect these to the plugs. These connectors are easily unplugged by accident when doing other work inside the computer, so it is a good practice to always recheck these connections before replacing the cover. For example, if the computer won’t power on, it may not be a power supply issue, it may simply be that the “power switch” front panel connector became unplugged. If the power switch isn’t completely plugged into the motherboard, the computer will not turn on.</p>
<div class="imagewrap"><span class="image"><img alt="The front panel connectors are connectors made up of various, small,      multicolored cables, plugged into slots close to the edge of the      motherboard." class="popimg" id="_i_8" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image10.png" title="The front panel connectors are connectors made up of various, small,      multicolored cables, plugged into slots close to the edge of the      motherboard."/></span><span class="caption" lang="">Front panel connectors. Photo used under CC-BY-ND license from<span> </span><a href="https://flic.kr/p/b8k2iH" id="_i_9" lang="" target="_blank">World / In / My / Eyes</a>.</span></div>
<div class="imagewrap"><span class="caption" lang=""></span></div>
<h3>46頁中英版</h3>
<span class="caption" lang=""></span>
<div class="imagewrap">
<p lang="">第一批微處理器於1970年代製造。這些微處理器基於NMOS（n型金屬氧化物半導體）邏輯和晶體管構建。早期，四位處理器（例如Intel 4004）很常見。英特爾4004具有2300個晶體管。它每秒執行60,000次操作，尋址640字節的內存，並以740 kHz的速度運行。英特爾4004的價格約為200美元。十年後，摩托羅拉6502等八位處理器取代了四位芯片。摩托羅拉6502是8毫米製程技術芯片，面積為4毫米見方。到1970年代末，出現了16位處理器。</p>
<p id="N106B8" lang=""><span><span>在1980年代，新設計中普遍使用16位和32位微處理器，並且CMOS（互補金屬氧化物半導體）技術取代了NMOS。</span><span>在過去的十年中，晶體管的數量急劇增加。</span><span>1980年代的家用計算機主要使用1970年代引入的處理器。</span><span>1975年首次發布的Motorola 6502和Zilog Z80（1976）的版本是許多家用計算機的核心，例如Commodore 64和ZX Spectrum。</span><span>甚至第一代IBM PC都使用了1970年代的處理器：Intel8088。直到Intel的80286（在IBM PC AT中）和後來的80386，1980年代的計算機才使用1980年代設計的處理器。</span><span>這些近十年來的處理器提供了更高的時鐘速度和32位字長，以及新的工作模式，例如保護模式，</span><span>早期芯片中沒有的功能。</span><span>具體來說，英特爾80386是32位芯片。</span><span>它擁有超過275,000個晶體管，每秒可執行超過500萬條指令。</span><span>80386的價格約為299美元。</span><span>至關重要的是，在這些更高級的芯片中，從Microsoft Windows 2.0開始，保護模式允許使用虛擬內存，並將圖形用戶界面帶入商用計算機。</span></span></p>
<p id="N106BB" lang=""><span><span>32位微處理器在1990年代主導了消費市場。</span><span>在1990年至1999年之間，處理器時鐘速度提高了十倍以上，並且在該十年後期開始出現64位處理器。</span><span>在1990年代，微處理器不再為處理器和RAM使用相同的時鐘速度。</span><span>這項技術可以提高處理器速度。</span><span>1993年，英特爾發布了奔騰處理器。</span><span>奔騰芯片是60 MHz處理器。</span><span>它裝有310萬個晶體管，售價約為875美元。</span></span></p>
<p id="N106BE" lang=""><span><span>在2000年代，64位處理器成為主流。</span><span>由於冷卻技術達到頂峰，微處理器時鐘速度達到了上限。</span><span>散發處理器熱量的能力已達到極限。</span><span>製造商沒有採用昂貴且不切實際的冷卻系統，而是尋求其他方法來使用多核處理器技術來提高處理器性能。</span><span>超頻誕生於1990年代，但在2000年代就已誕生。</span><span>隨著多核技術的引入，處理器成本開始急劇下降。</span></span></p>
<p id="N106C1" lang=""><span><span>設計用於超頻處理器的現成的冷卻系統變得越來越普遍，而設計用於遊戲的PC的概念也越來越普遍。</span><span>在過去的十年中，晶體管的數量增加了大約一個數量級，這一趨勢延續了過去的幾十年。</span><span>處理器尺寸從180 nm減少到45 nm約四倍。</span></span><a href="http://www.computerhope.com/comp/amd.htm" id="_i_0" lang="" target="_blank"><span><span>AMD</span></span></a><span><span>在2007年</span><span>發布了Athlon X2處理器系列。</span><span>AMD Athlon X2 Brisbane系列以1.9至2.6 GHz的速度進行處理，並包含512 KB L2緩存。</span><span>2012年，</span></span><a href="http://www.computerhope.com/comp/amd.htm" id="_i_1" lang="" target="_blank"><span><span>AMD</span></span></a><span><span>發布了A10-5700台式機處理器。</span><span>它包括一個4M L2高速緩存，並以3.4 GHz或Turbo模式下的4.0 GHz的速度進行處理。</span><span>AMD的A10-5800K與A10-5700同時發布，具有相同的緩存，但在Turbo模式下可提供3.8 GHz或4.2 GHz的處理速度。</span><span>在2010年代，處理器通常容納2.5至40億個晶體管。</span></span></p>
<h3>46頁英文版</h3>
<p id="N106B5" lang="">The first microprocessors were manufactured in the 1970s. These microprocessors were built on NMOS (n-type metal-oxide semiconductor) logic and transistors. Early on, four-bit processors, like the Intel 4004, were common. The Intel 4004 had 2300 transistors. It performed 60,000 operations per second and addressed 640 bytes of memory, and operated at a speed of 740 kHz. The Intel 4004 cost approximately $200. Later in the decade, eight-bit processors such as the Motorola 6502 superseded the four-bit chips. The Motorola 6502 was an eight micrometer process technology chip that was four millimeters square. By the end of the 1970s, 16-bit processors emerged.</p>
<p id="N106B8" lang="">In the 1980s, 16-bit and 32-bit microprocessors were common among new designs, and CMOS (complementary metal-oxide semiconductor) technology overtook NMOS. Transistor count increased dramatically during the decade. The home computers of the 1980s predominantly used processors that were introduced in the 1970s. Versions of the Motorola 6502, first released in 1975, and the Zilog Z80 (1976), were at the core of many home computers, such as the Commodore 64 and the ZX Spectrum. Even the first-generation IBM PC used a processor from the 1970s: the Intel 8088. It was not until Intel's 80286 (in the IBM PC AT), and later the 80386, that 1980s computers used 1980s-designed processors. These late-decade processors offered higher clock speeds and 32-bit word length as well as new operating modes, such as protected mode, that were not available in earlier chips. Specifically, the Intel 80386 was a 32-bit chip. It had more than 275,000 transistors and could perform more than five million instructions every second. The 80386 cost approximately $299. Critically, in these more advanced chips, protected mode allowed the use of virtual memory and brought the graphical user interface to business computers, beginning with Microsoft Windows 2.0.</p>
<p id="N106BB" lang="">The 32-bit microprocessor dominated the consumer market in the 1990s. Processor clock speeds increased by more than tenfold between 1990 and 1999, and 64-bit processors began to emerge later in the decade. In the 1990s, microprocessors no longer used the same clock speed for the processor and the RAM. This technology allowed for the improvement in processor speeds. In 1993, Intel released the Pentium processor. The Pentium chip was a 60 MHz processor. It incorporated 3.1 million transistors and sold for approximately $875.</p>
<p id="N106BE" lang="">In the 2000s, 64-bit processors became mainstream. Microprocessor clock speeds reached a ceiling because cooling technology peaked. The ability to dissipate heat from the processor had reached a limit. Instead of implementing expensive and impractical cooling systems, manufacturers looked to other methods to improve processor performance by using multicore processor technology. Overclocking was born in the 1990s, but came into its own in the 2000s. With the introduction of multicore technology, processor costs began to drop dramatically.</p>
<p id="N106C1" lang="">Off-the-shelf cooling systems designed for overclocked processors became more and more common, as did the concept of a PC designed for gaming. Over the decade, transistor counts increased by about an order of magnitude, a trend continued from previous decades. Processor sizes decreased about fourfold, from 180 nm to 45 nm. In 2007<span> </span><a href="http://www.computerhope.com/comp/amd.htm" id="_i_0" lang="" target="_blank">AMD</a><span> </span>released the Athlon X2 processor line. The AMD Athlon X2 Brisbane series processed at a speed of 1.9 to 2.6 GHz and it included a 512 KB L2 cache. In 2012,<span> </span><a href="http://www.computerhope.com/comp/amd.htm" id="_i_1" lang="" target="_blank">AMD</a><span> </span>released the A10-5700 desktop processor. It included a 4M L2 cache and processed at a speed of 3.4 GHz, or 4.0 GHz in turbo mode. AMD’s A10-5800K, released at the same time as the A10-5700, included the same cache, but provided for processing speeds of 3.8 GHz or 4.2 GHz in turbo mode. In the 2010s, processors typically hold between 2.5 and 4 billion transistors.</p>
<h3>47頁中英版</h3>
</div>
<div>
<div class="youtube" id="uwrap__i_10">
<p id="N10688" lang=""><span>虛擬化是CPU的絕佳補充。虛擬化正在席捲計算機世界，在此過程中為我們節省了大量資金。過去，如果要運行多個操作系統，則必須有多台計算機，但現在不再需要。使用硬件輔助虛擬化，我們可以使主機程序或主機操作系統（例如一台物理計算機）在主機OS的桌面內運行一個或多個來賓操作系統（例如虛擬計算機）。在下面的圖像中，您可以在程序窗口中查看運行Windows的Macintosh OSX系統，並在另一個程序窗口中查看Ubuntu Linux。在此示例中，我們在同一台計算機上同時使用三種不同的操作系統。有許多程序可以使這種情況發生，</span></p>
<div class="imagewrap"><span class="image"><img alt="Macintosh屏幕快照，顯示同一台計算機上運行的多個操作系統。" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image13.png" title="Macintosh屏幕快照，顯示同一台計算機上運行的多個操作系統。"/></span><span class="caption" lang=""><span><span>在Mac上運行的多個操作系統。</span><span>由</span></span><a href="https://flic.kr/p/kcfVN" id="_i_1" lang="" target="_blank"><span><span>西蒙•威利森</span></span></a><span><span>（</span><a href="https://flic.kr/p/kcfVN" id="_i_1" lang="" target="_blank"><span>Simon Willison）</span></a><span>根據知識共享許可使用的照片</span><span>。</span></span></span></div>
<p id="N10697" lang=""><span><span>但是，為什麼我們要運行多個系統？</span><span>好吧，如果您在一家僅使用為Windows構建的自定義程序但擁有Macintosh並需要在家運行該程序的公司工作，該怎麼辦？</span><span>在過去，您只需要購買一台PC即可運行該程序。</span><span>現在，您只需在Macintosh中加載Virtual Windows 7計算機並運行該程序即可。</span><span>在服務器方面，服務器要花費數万美元。</span><span>如果要運行小型Web服務器，則可能不需要這種類型的處理。</span><span>因此，託管公司可以使用單個服務器，並在單個服務器上提供數百個虛擬服務器，您每月只需支付幾美元的訪問費。</span></span></p>
<p id="N1069A" lang=""><span><span>虛擬化正在繼續擴展，並將在可預見的將來繼續擴展。</span><span>許多公司和個人正在遷移到存在虛擬機而無需內部部署硬件的雲中。</span><span>在雲計算中，從雲計算公司作為服務購買了運行多個操作系統或軟件的基礎架構。</span></span></p>
<div class="section" id="N1069D">
<div class="sectionContain">
<h4>集成圖形處理單元（GPU）</h4>
<p id="N106A4" lang=""><span><span>集成的圖形處理單元（GPU）允許更快的視頻處理，更容易的內存訪問以及總體上較低的構建系統成本。</span><span>這個想法是，圖形不是由可能花費數百美元的專用圖形卡，而是由CPU內部的專用圖形協處理器（如下圖所示，底部的較小芯片）處理。</span><span>這些功能非常適合非3D用途，例如網上沖浪，辦公產品，DVD和視頻播放或低端遊戲。</span><span>但是，如果將系統用於視頻/圖形製作，計算機輔助設計（CAD）或遊戲，則通常需要使用母板上的PCIe x16插槽進行連接的獨立（專用）圖形卡。</span></span></p>
<div class="imagewrap"><span class="image"><img alt="一個同時裝有GPU和CPU的主板組件。 CPU是組件上較大的方形芯片，GPU是組件上較小的方形芯片。" class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image14.png" title="一個同時裝有GPU和CPU的主板組件。 CPU是組件上較大的方形芯片，GPU是組件上較小的方形芯片。"/></span><span class="caption" lang=""><span><span>其中GPU（底部較小的芯片）和CPU（較大頂部的芯片）集成在一個芯片上的處理器。</span><span>照片由</span></span><a href="https://flic.kr/p/j7xdyZ" id="_i_3" lang="" target="_blank"><span><span>Henriok</span></span></a><span><span>根據CC-BY-SA許可<span> </span></span><a href="https://flic.kr/p/j7xdyZ" id="_i_3" lang="" target="_blank"><span>使用</span></a><span>。</span></span></span></div>
<div><iframe allowfullscreen="allowfullscreen" enablejsapi="1" frameborder="0" height="360" id="_i_4" src="https://www.youtube.com/embed/mp-FuhLs0BQ?enablejsapi=1&amp;rel=0&amp;vq=large" width="640"></iframe>
<h3>47頁英文版</h3>
<div class="youtube">
<div class="imagewrap"><span class="image"><img alt="Macintosh screenshot showing multiple operating systems running on the same    computer." class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image13.png" title="Macintosh screenshot showing multiple operating systems running on the same    computer."/></span><span class="caption" lang="">Multiple operating systems running on a Mac. Photo used under Creative Commons license from<span> </span><a href="https://flic.kr/p/kcfVN" id="_i_1" lang="" target="_blank">Simon Willison</a>.</span></div>
<p id="N10697" lang="">Why would we want to run multiple systems, though? Well, what if you work for a company that only uses a custom program it built for Windows but you own a Macintosh and need to run that program at home? In the old days, you would buy a PC just to run that single program. Now you can just load up a Virtual Windows 7 machine in your Macintosh and run the program. On the server side, servers costs tens of thousands of dollars. If you want to run a small web server, you may not need that type of processing. So, hosting companies can use a single server and provide hundreds of virtual servers on the single server and you pay only a few dollars a month for access.</p>
<p id="N1069A" lang="">Virtualization is continuing to expand and will continue to do so for the foreseeable future. Many companies and individuals are migrating to the cloud where virtual machines exist without the need for on-premises hardware. In cloud computing, infrastructure to run multiple operating systems or software is purchased from a cloud computing company as a service.</p>
<div class="section" id="N1069D">
<div class="sectionContain"></div>
</div>
</div>
</div>
<h4>Integrated Graphics Processing Unit (GPU)</h4>
<p id="N106A4" lang="">The integrated graphics processing unit (GPU) allows for faster video processing, easier access to memory, and an overall lower cost to building a system. The idea is that instead of having a dedicated graphics card that could cost hundreds of dollars, the graphics are instead handled by a dedicated graphics coprocessor inside the CPU (the bottom, smaller chip in the image shown below). These work well for non-3D uses, such as web surfing, office products, DVD and video playback, or low-end games. However, if the system will be used for video/graphic production, computer aided design (CAD), or gaming, a discrete (dedicated) graphics card is more desirable, usually connected by using the PCIe x16 slot on the motherboard.</p>
<div class="imagewrap"><span class="image"><img alt="A motherboard component in which the GPU and CPU are both installed. The      CPU is a larger, square chip, and the GPU is a smaller, square chip on the      component." class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image14.png" title="A motherboard component in which the GPU and CPU are both installed. The      CPU is a larger, square chip, and the GPU is a smaller, square chip on the      component."/></span><span class="caption" lang="">A processor in which the GPU (bottom, smaller chip) and CPU (larger, top chip) are integrated on a single chip. Photo used under CC-BY-SA license from<span> </span><a href="https://flic.kr/p/j7xdyZ" id="_i_3" lang="" target="_blank">Henriok</a>.</span></div>
<div class="youtube" id="uwrap__i_4"><iframe allowfullscreen="allowfullscreen" enablejsapi="1" frameborder="0" height="360" id="_i_4" src="https://www.youtube.com/embed/mp-FuhLs0BQ?enablejsapi=1&amp;rel=0&amp;vq=large" width="640"></iframe></div>
<h3>48頁中英文版</h3>
<p id="N10688" lang=""><span>最後，我們需要討論在主板上運行CPU時如何冷卻。有幾種選擇。首先，有一個無源散熱器，它是一個帶有散熱片的金屬設備，可以將熱量從處理器散發出去。這是冷卻CPU的非常安靜的方法。但是，大多數現代CPU產生的熱量太多，僅被動散熱片就無法發揮作用。因此，無源散熱器通常與有源散熱器耦合，在有源散熱器上，專用風扇連接到金屬翅片散熱器的頂部，以更有效地吸收熱量。</span></p>
<p id="N1068B" lang=""><span><span>在將散熱器連接到CPU之前，技術人員應首先在CPU上塗導熱膏，以幫助熱量從CPU傳遞到金屬散熱器。</span><span>因此，典型的安裝方法是將CPU放入處理器插槽中，對其進行導熱粘貼，然後將翅片散熱器連接到處理器頂部，最後將專用風扇連接到散熱器頂部。</span><span>導熱膏是使CPU絕緣的相變材料。</span><span>糊劑在室溫下為固體，但在較高溫度下變為液體。</span><span>當變成液體時，它消除了空氣，並提供了更好的絕緣性。</span></span></p>
<p id="N1068E" lang=""><span><span>另一種選擇是使用液體冷卻系統。</span><span>這是通過將特殊的液體溶液通過計算機泵送到熱交換器來進行的，在熱交換器中，風扇在循環之前冷卻液體。</span><span>這些系統僅用於非常高性能的系統和超頻系統，並且安裝和運行起來可能很複雜。</span></span></p>
<p id="N10691" lang=""><span><span>在選擇冷卻系統時，噪音是一個大問題。</span><span>迄今為止，無源系統是最安靜的，而涉及風扇的有源系統是最嘈雜的。</span><span>與較大的CPU風扇相比，液冷系統通常使用較小的風扇來冷卻液體，因此，這是一種安靜的冷卻方法，但成本很高。</span></span></p>
<div class="imagewrap"><span class="image"><img alt="安裝在主板上的計算機風扇。" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image15.png" title="安裝在主板上的計算機風扇。"/></span><span class="caption" lang=""><span><span>電腦風扇。</span><span>照片由</span></span><a href="https://flic.kr/p/JvMbS" id="_i_1" lang="" target="_blank"><span><span>Thomas Ormston</span></span></a><span><span>根據CC-BY-NC-ND許可</span><a href="https://flic.kr/p/JvMbS" id="_i_1" lang="" target="_blank"><span>使用</span></a><span>。</span></span></span></div>
<div class="imagewrap"><span class="image"><img alt="安裝在CPU上的液體冷卻設備。 連接到設備的是兩個運送液體的綠色管。" class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image16.png" title="安裝在CPU上的液體冷卻設備。 連接到設備的是兩個運送液體的綠色管。"/></span><span class="caption" lang=""><span><span>水冷式CPU。</span><span>照片由</span></span><a href="https://flic.kr/p/nki4j" id="_i_3" lang="" target="_blank"><span><span>Don Richards</span></span></a><span><span>在CC-BY許可下使用</span><span>。</span></span></span></div>
<div><br/><span></span><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" enablejsapi="1" frameborder="0" height="360" id="_i_4" src="https://www.youtube.com/embed/kbQpPFc-J8k?enablejsapi=1&amp;rel=0&amp;vq=large" width="640"></iframe></div>
<h3>48頁英文版</h3>
<p id="N10688" lang="">Finally, we need to talk about how to cool the CPU when it is running on the motherboard. There are several options. First, there is the passive heat sink, which is a metal device with fins that radiates heat away from the processor. This is a very quiet method of cooling the CPU. However, most modern CPUs generate too much heat for a passive heat sink alone to be effective. Therefore, the passive heat sink is often coupled with an active heat sink, where a dedicated fan is connected to the top of the finned metal heat sink to draw the heat through the heat sink more effectively.</p>
<p id="N1068B" lang="">Before connecting the heat sink to the CPU, technicians should first apply thermal paste to the CPU to aid in heat transfer from the CPU to the metal heat sink. Therefore, your typical installation would be to place the CPU in the processor socket, apply thermal paste to it, then connect the finned heat sink to the top of the processor, and finally connect the dedicated fan to the top of the heat sink. A thermal paste is a phase change material that insulates the CPU. The paste is solid at room temperature, but changes to liquid at higher temperatures. When it turns to liquid, it eliminates any air and provides better insulation.</p>
<p id="N1068E" lang="">Another option is to use a liquid cooled system. This operates by pumping a special liquid solution through the computer to a heat exchanger, where a fan cools the liquid before recirculation. These systems are only used in very high-performance systems and overclocked systems, and can be complicated to install and run.</p>
<p id="N10691" lang="">When deciding on a cooling system, noise is a big concern. Passive systems are the quietest, whereas active systems involving fans are by far the noisiest. A liquid-cooled system often uses a much smaller fan to cool the liquid compared to larger CPU fans, and therefore, it is a quieter cooling method, yet quite expensive.</p>
<div class="imagewrap"><span class="image"><img alt="Computer fan installed on a motherboard." class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image15.png" title="Computer fan installed on a motherboard."/></span><span class="caption" lang="">Computer fan. Photo used under CC-BY-NC-ND license from<span> </span><a href="https://flic.kr/p/JvMbS" id="_i_1" lang="" target="_blank">Thomas Ormston</a>.</span></div>
<div class="imagewrap"><span class="image"><img alt="Liquid cooling device installed on a CPU. Attached to the device are two green    tubes carrying liquid." class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH05/webcontent/PCH05/image16.png" title="Liquid cooling device installed on a CPU. Attached to the device are two green    tubes carrying liquid."/></span><span class="caption" lang="">Liquid-cooled CPU. Photo used under CC-BY license from<span> </span><a href="https://flic.kr/p/nki4j" id="_i_3" lang="" target="_blank">Don Richards</a>.</span></div>
<div>
<div class="youtube" id="uwrap__i_4"><iframe allowfullscreen="allowfullscreen" enablejsapi="1" frameborder="0" height="360" id="_i_4" src="https://www.youtube.com/embed/kbQpPFc-J8k?enablejsapi=1&amp;rel=0&amp;vq=large" width="640"></iframe></div>
</div>
<h2>CH6</h2>
<h3>50頁中英文版</h3>
<p id="N10677" lang=""><span>為了使計算機正常運行，它需要一個臨時存儲空間來存儲從用戶或硬盤驅動器輸入到計算機中的數據，並將要寫入的數據存儲到更永久的存儲器中。該臨時存儲稱為RAM或隨機存取存儲器。RAM是CPU處理數據的工作區。計算機啟動時，操作系統（操作系統）將啟動文件加載到RAM中。RAM是動態的並且不斷變化。它的運行速度比硬盤驅動器快得多，並且可由計算機隨時更改。RAM是易失性內存，這意味著在斷電時它會丟失所有信息，因此只能用作臨時存儲。該內存用於操作系統啟動文件（引導加載程序），程序，數據和磁盤緩存。</span></p>
<div class="imagewrap"><span class="image"><img alt="1GB隨機存取存儲板的照片。" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image1.png" title="1GB隨機存取存儲板的照片。"/></span><span class="caption" lang=""><span><span>隨機存取內存板。</span><span>照片由</span></span><a href="https://flic.kr/p/5WwhEQ" id="_i_1" lang="" target="_blank"><span><span>Matt Keifer</span></span></a><span><span>根據CC-BY-SA許可使用</span><span>。</span></span></span></div>
<h3>50頁英文版</h3>
<p id="N10677" lang="">In order for a computer to function, it needs a temporary storage space to store data that is input into the computer from the user or the hard drive, and to store data that is about to be written to more permanent storage. This temporary storage is called RAM, or random access memory. RAM is the workspace for the CPU to process data. When the computer boots up the OS (operating system) loads the start files into RAM. RAM is dynamic and constantly changing. It operates much faster than a hard drive, and can be changed at any time by the computer. RAM is volatile memory which means it loses all its information when power is removed, so it can only be used as temporary storage. This memory is used for operating systems startup files (bootstrap loader), programs, data, and disk caching. Adding RAM to a computer is one of the easiest and most effective upgrades a person can perform, since it drastically improves the transfers between the CPU and the other input devices (like hard drives), and this increases the overall speed of the computer.</p>
<div class="imagewrap"><span class="image"><img alt="Photograph of 1GB random access memory board." class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image1.png" title="Photograph of 1GB random access memory board."/></span><span class="caption" lang="">Random access memory board. Photo used under CC-BY-SA license from<span> </span><a href="https://flic.kr/p/5WwhEQ" id="_i_1" lang="" target="_blank">Matt Keifer</a>.</span></div>
<h3>51頁中英文版</h3>
<p id="N10688" lang=""><span>內存的用途之一是充當磁盤緩存。就像我們在處理器中提到的緩存一樣，RAM充當了硬盤驅動器中最近使用和常用數據的更快的臨時存儲區域。由於訪問RAM比查找硬盤驅動器扇區中的數據更快，因此RAM可提高計算機的性能。僅當內存中有可用空間時才可以使用磁盤緩存。但是，如果您沒有足夠的物理內存可用怎麼辦？當物理內存不足時，計算機將創建虛擬內存。虛擬內存有時也稱為“頁面文件”或“交換文件”。虛擬內存是RAM的慢速替代品，因為它是在硬盤驅動器上創建的臨時文件，並模擬物理RAM。本質上，磁盤緩存使RAM可以充當極快的硬盤驅動器，而虛擬內存由硬盤驅動器上的文件組成，它們的運行速度非常慢。RAM的速度比磁存儲（如硬盤驅動器和軟盤）或光存儲（DVD，CD，藍光）要快。這是因為RAM是固態設備，訪問時間沒有特別長。RAM的運行速度為十億分之一秒（十億分之一秒），而硬盤驅動器和其他磁性介質的運行速度非常慢，為千分之一秒（十億分之一秒）。RAM不足會導致計算機運行更慢。因此，升級RAM是A +技術人員執行的最常見的升級之一。RAM的速度比磁存儲（如硬盤驅動器和軟盤）或光存儲（DVD，CD，藍光）要快。這是因為RAM是固態設備，訪問時間沒有特別長。RAM的運行速度為十億分之一秒（十億分之一秒），而硬盤驅動器和其他磁性介質的運行速度非常慢，其運行速度為千分之一秒（毫秒）。RAM不足會導致計算機運行更慢。因此，升級RAM是A +技術人員執行的最常見的升級之一。RAM的速度比磁存儲（如硬盤驅動器和軟盤）或光存儲（DVD，CD，藍光）要快。這是因為RAM是固態設備，訪問時間沒有特別長。RAM的運行速度為十億分之一秒（十億分之一秒），而硬盤驅動器和其他磁性介質的運行速度非常慢，為千分之一秒（十億分之一秒）。RAM不足會導致計算機運行更慢。因此，升級RAM是A +技術人員執行的最常見的升級之一。RAM不足會導致計算機運行更慢。因此，升級RAM是A +技術人員執行的最常見的升級之一。RAM不足會導致計算機運行更慢。因此，升級RAM是A +技術人員執行的最常見的升級之一。</span></p>
<div class="imagewrap"><span class="image"><img alt="主板上安裝的隨機存取存儲器板的照片" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image2.png" title="主板上安裝的隨機存取存儲器板的照片"/></span><span class="caption" lang=""><span><span>主板上安裝了隨機存取存儲器板。</span><span>照片由</span></span><a href="https://flic.kr/p/JtSdt" id="_i_1" lang="" target="_blank"><span><span>redjar</span></span></a><span><span>根據CC-BY-SA許可</span><a href="https://flic.kr/p/JtSdt" id="_i_1" lang="" target="_blank"><span>使用</span></a><span>。</span></span></span></div>
<div class="section" id="classifying_memory">
<div class="sectionContain">
<p id="N106A0" lang=""><span><span>RAM有多種分類：內存模塊類型，芯片類型，速度和奇偶校驗。</span><span>內存模塊因類型而異，具體取決於母板和母板的外形尺寸。</span><span>內存模塊由其上的針腳數量定義，例如240針DIMM（雙列直插式內存模塊），184針DIMM等。</span></span></p>
<p id="N106A3" lang=""><span><span>RAM也根據存儲芯片類型進行分類。</span><span>過去，系統根據製造商使用不同類型的芯片，但是當前的系統大多使用相同類型的芯片，通常是DDR（雙數據速率），DDR2或DDR3。</span><span>儘管DDR是最常見的類型，但某些獨特的系統可能會使用RDRAM（Rambus動態隨機存取存儲器）。</span></span></p>
<p id="N106A6" lang=""><span><span>另一個RAM分類基於速度。</span><span>較舊的內存以納秒（例如60納秒）分類。</span><span>隨著時間的流逝，所有內存的速度幾乎相同，以納秒為單位，因此他們將其更改為總線速度（例如，PC-133內存以133 MHz的總線速度運行）。</span><span>現在，大多數當代內存都是按吞吐量衡量的（PC2-6400，工作於800 MHz，但具有6.4 GBps的帶寬）。</span></span></p>
<p id="N106A9" lang=""><span><span>最後，可以使用奇偶校驗，非奇偶校驗或ECC購買存儲器並按其分類。</span><span>奇偶校驗存儲器在將數據讀/寫到芯片時檢查錯誤。</span><span>儘管奇偶校驗內存可以檢測到錯誤，但無法糾正錯誤。</span><span>非奇偶校驗內存是台式計算機中最常見的類型之一，沒有錯誤檢查功能。</span><span>糾錯碼（ECC）是奇偶校驗的高級版本，可以發現錯誤並在從芯片讀取/寫入該錯誤時對其進行糾正。</span><span>由於這些附加功能，ECC往往比等效的非奇偶校驗RAM慢。</span></span></p>
<div class="imagewrap"><span class="image"><img alt="隨機存取存儲板的照片。" class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image3.png" title="隨機存取存儲板的照片。"/></span><span class="caption" lang=""><span><span>隨機存取內存板。</span></span><a href="https://flic.kr/p/nPXGfL" id="_i_3" lang="" target="_blank"><span><span>喬納森·科恩</span></span></a><span><span>（</span><a href="https://flic.kr/p/nPXGfL" id="_i_3" lang="" target="_blank"><span>Jonathan Cohen）</span></a><span>根據CC-BY-NC許可使用的照片</span><span>。</span></span></span></div>
<h4>51頁英文版</h4>
<div class="imagewrap">
<p id="N10688" lang="">One of the uses of memory is to serve as a disk cache. Like the caches we mentioned in the processor, the RAM acts as a faster, temporary storage area for recently used and commonly used data from the hard drive. Because it is quicker to access RAM than to seek out the data in the hard drive’s sectors, RAM increases the performance of the machine. Disk caching can be used only when there is available extra space in the memory. But what happens if you do not have enough physical memory available? When there is not enough physical memory, the computer creates virtual memory. Virtual memory is sometimes referred to as "page files" or “swap files.” Virtual memory is a slow substitute for RAM since it is a temporary file created on the hard drive and emulates the physical RAM. Essentially, disk caching allows RAM to act like an extremely fast hard drive, while virtual memory consists of files on the hard drive acting as extremely slow memory. RAM is faster than either magnetic storage (like hard drives and floppy disks) or optical storage (DVD, CD, Blu-ray). This is because RAM is a solid-state device without exceedingly long access times. RAM operates in the billionths of a second (nanoseconds), while hard drives and other magnetic media are very slow, operating in the thousandths of a second (milliseconds). Insufficient RAM causes a computer to operate more slowly. So, upgrading RAM is one of the most common upgrades performed by an A+ technician.</p>
<div class="imagewrap"><span class="image"><img alt="Photograph of random access memory board installed on motherboard" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image2.png" title="Photograph of random access memory board installed on motherboard"/></span><span class="caption" lang="">Random access memory board installed on motherboard. Photo used under CC-BY-SA license from<span> </span><a href="https://flic.kr/p/JtSdt" id="_i_1" lang="" target="_blank">redjar</a>.</span></div>
<div class="section" id="classifying_memory">
<div class="sectionContain">
<p id="N106A0" lang="">There are multiple classifications for RAM: memory module type, chip type, speed, and parity. Memory modules vary by type, which is defined by the motherboard and the motherboard’s form factor. Memory modules are defined by the number of pins they have on the modules, like 240-pin DIMM (dual in-line memory module), 184-pin DIMM, etc.</p>
<p id="N106A3" lang="">RAM is also classified based upon memory chip type. In the past, systems used different types of chips based on their manufacturer, but current systems use mostly the same type, usually DDR (dual data rate), DDR2, or DDR3. Although the DDR is the most common type, some unique systems may use RDRAM (Rambus dynamic random access memory).</p>
<p id="N106A6" lang="">Another RAM classification is based on speed. Older memory was classified in nanoseconds (for example, 60 nanoseconds). Over time, all memory became nearly the same speed, as measured in nanoseconds, so they changed this to bus speed (for example, PC-133 memory operates at a bus speed of 133 MHz). Most contemporary memory is now measured in throughput (PC2-6400, which operates at 800 MHz but has 6.4 GBps of bandwidth).</p>
<p id="N106A9" lang="">Finally, memory can be purchased with and classified by parity, non-parity, or ECC. Parity memory checks for errors as data is read/written to the chip. While parity memory can detect an error, it cannot correct it. Non-parity memory, one of the most common types found in desktop computers, has no error checking ability. Error correcting code (ECC) is an advanced version of parity that can find an error and correct that error as it is read/written from the chip. Due to these additional functions, ECC tends to be slower than equivalent non-parity RAM.</p>
<div class="imagewrap"><span class="image"><img alt="Photograph of random access memory board." class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image3.png" title="Photograph of random access memory board."/></span><span class="caption" lang="">Random access memory board. Photo used under CC-BY-NC license from<span> </span><a href="https://flic.kr/p/nPXGfL" id="_i_3" lang="" target="_blank">Jonathan Cohen</a>.</span></div>
52頁中英文版
<p id="N10688" lang=""><span>在不同時間段內，通常使用不同類型的RAM。了解所有這些信息非常重要，因為許多公司使用的都是舊系統和最新系統。DRAM或動態RAM是最古老的類型之一。它需要經常刷新內容。DRAM將數據或程序代碼的每一位存儲在由電容器和晶體管組成的存儲單元中，並且通常以矩形配置的存儲單元來組織。DRAM存儲單元是動態的，因為它需要每幾毫秒刷新一次或給其提供新的電荷，以補償電容器的電荷洩漏。</span></p>
<p id="N1068B" lang=""><span><span>SRAM或靜態RAM解決了不斷刷新的問題，但製造成本很高。</span><span>因此，SRAM僅用於非常高速的需求，例如1級，2級和3級CPU高速緩存，硬盤驅動器緩衝區和LCD屏幕緩衝區。</span></span></p>
<p id="N1068E" lang=""><span><span>SDRAM或同步DRAM是第一個以與主板總線相同的速度運行的內存。</span><span>最初的芯片是168針雙列直插式內存模塊，其速度額定為MHz。</span><span>常見的命名約定包括PC-66（相當於66 Mhz），PC-133或PC-266。</span></span></p>
<p id="N10691" lang=""><span><span>儘管SDRAM的運行速度與主板總線相同，但CPU的運行速度卻比主板總線快許多倍。</span><span>DDR SDRAM代表雙倍數據速率同步動態隨機存取存儲器。</span><span>這種類型的存儲器可以在每個時鐘週期兩次傳輸數據，從而使速度比傳統SDRAM快一倍。</span><span>這些芯片有184引腳的型號，額定為MBps（吞吐量）。</span><span>一個很好的例子就是PC-1600，吞吐量為1600 MBps。</span></span></p>
<p id="N10694" lang=""><span><span>DDR2 SDRAM是雙倍數據速率SDRAM，具有更高的<span> </span></span></span><a aria-describedby="N10698" class="extra" id=""></a><span><span>延遲，</span></span><span><span><span> </span>但對外部總線的訪問速度更快。</span><span>這些芯片具有240個引腳以將其模塊連接到插槽，並且還以MBps額定，例如PC2-4200，即4200 MBps（或4.2 GBps）。</span></span></p>
<p id="N1069F" lang=""><span><span>DDR3 SDRAM被稱為雙倍數據速率3 SDRAM，是當今使用的最新一代SDRAM。</span><span>它在較低的電壓下運行，並且比DDR2更快，但是與之前的DDR2模塊相比，延遲又增加了。</span><span>這些模塊還具有240針，但是它們的“鍵控”與DDR2不同。</span><span>“鍵控”部分是引腳上的間隙所在的位置，因此只有DDR2可以插入DDR2插槽，而DDR3只能插入DDR3插槽。</span><span>這些的常用符號是PC3-10600，其中10600是MBps的速度。</span></span></p>
<p id="N106A2" lang=""><span><span>Rambus直接RAM（RDRAM）也被稱為RIMM（Rambus嵌入式存儲模塊）。</span><span>這些模塊具有184針變體（16位版本）和232針變體（32位版本）。</span><span>主板上的每個空插槽都必須在其中放置一個連續性模塊（CRIMM），否則主板將無法正確識別內存。</span><span>在最近的系統中未使用此功能，但在Pentium 4系統中大量使用了此功能。</span><span>RDRAM以MBps為單位進行測量，例如RIMM 4200（或4200 MBps）。</span></span></p>
<div class="imagewrap"><span class="image"><img alt="隨機存取存儲器" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image4.jpg" title="隨機存取存儲器"/></span><span class="caption" lang=""><span><span>隨機存取存儲器。</span><span>來自</span></span><a href="https://en.wikipedia.org/wiki/Random-access_memory#/media/File:Memory_module_DDRAM_20-03-2006.jpg" id="_i_1" lang="" target="_blank"><span><span>Wikipedia的</span></span></a><span><span>公共領域圖片</span><span>。</span></span></span></div>
<div actguid="d87f2dec0a0001dc2eb08dff6eb5429d" class="asx" inlineparams="inlineClient=%2Fsuperactivity%2Fassessment2%2FInlineAssessmentClient.swf&amp;activityMode=delivery&amp;activityContextGUID=d87f2dec0a0001dc2eb08dff6eb5429d&amp;userGUID=40923111&amp;activityService=%2Fjcourse%2Fa2%2Frest&amp;webContentPath=%2Frepository%2Fwebcontent%2Fd826575d0a0001dc3e9f244fa018c560%2F&amp;logService=%2Flog%2Fserver&amp;">
<div class="activitywrap purpose learnbydoing flash" id="dpch06_lbd04">
<div class="activityhead">
<p id="N106D1" lang=""><span>多年以來，內存還使用了其他變體，但如今並不常見。單列直插式內存模塊或SIMM在芯片的兩側都有30或72個連接器。單列直插式引腳封裝或SIPP只有30個引腳，它們是物理引腳而不是連接器。</span></p>
<p id="N106D4" lang=""><span><span>DDR，DDR2和DDR3芯片使用雙列直插式內存模塊或DIMM，模塊的每一側在連接器中具有不同的引腳排列。</span><span>SODIMM是小型DIMM，是便攜式計算機，筆記本計算機和打印機中使用的緊湊型內存。</span><span>它可以採用DDR SODIMM，DDR2 SODIMM或DDR3 SODIMM。</span><span>SODIMM非常普遍，今天仍然大量使用。</span></span></p>
<p id="N106D7" lang=""><span><span>最後，有一種筆記本電腦版本的Rambus內存，稱為小型Rambus模塊，但在現代系統中很少使用。</span></span></p>
<div class="imagewrap"><span class="image"><img alt="小型雙列直插式內存模塊（SODIMM）的照片" class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image5.png" title="小型雙列直插式內存模塊（SODIMM）的照片"/></span><span class="caption" lang=""><span><span>小型雙列直插式內存模塊（SODIMM）。</span><span>照片由</span></span><a href="https://flic.kr/p/8Eexuh" id="_i_3" lang="" target="_blank"><span><span>William Warby</span></span></a><span><span>根據CC-BY許可使用</span><span>。</span></span></span></div>
<div actguid="d87f2ded0a0001dc588f7e25e5e2fac4" class="asx" inlineparams="inlineClient=%2Fsuperactivity%2Fassessment2%2FInlineAssessmentClient.swf&amp;activityMode=delivery&amp;activityContextGUID=d87f2ded0a0001dc588f7e25e5e2fac4&amp;userGUID=40923111&amp;activityService=%2Fjcourse%2Fa2%2Frest&amp;webContentPath=%2Frepository%2Fwebcontent%2Fd826575d0a0001dc3e9f244fa018c560%2F&amp;logService=%2Flog%2Fserver&amp;">
<div class="activitywrap purpose didigetthis flash" id="dpch06_digt01">
<div class="activityhead"></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h3>51頁英文版</h3>
<div class="activityhead">
<p id="N10688" lang="">Different types of RAM have been in common use during different time periods. It is important to understand them all, because many companies use a mix of legacy systems and more current ones. DRAM, or dynamic RAM, is one of the oldest types. It requires frequent refreshing of contents. DRAM stores each bit of data or program code in a storage cell consisting of a capacitor and a transistor, and is typically organized in a rectangular configuration of storage cells. A DRAM storage cell is dynamic in that it needs to be refreshed or given a new electronic charge every few milliseconds to compensate for charge leaks from the capacitor.</p>
<p id="N1068B" lang="">SRAM, or static RAM, solved the issue of the need for constant refreshing, but it is quite expensive to manufacture. Therefore, SRAM is only used for very high-speed needs, such as level 1, level 2, and level 3 CPU caches, hard drive buffers, and LCD screen buffers.</p>
<p id="N1068E" lang="">SDRAM, or synchronous DRAM, was the first memory that operated at the same speed as the motherboard’s bus. The initial chips were 168-pin dual in-line memory modules, which have their speed rated in MHz. Common naming conventions include PC-66 (which is equivalent to 66 Mhz), or PC-133, or PC-266.</p>
<p id="N10691" lang="">While SDRAM performs at the same speed as the motherboard’s bus, the CPU operates many times faster than the motherboard’s bus. DDR SDRAM stands for double data rate synchronous dynamic random access memory. This type of memory can transfer data two times per clock cycle, thereby doubling the speed over traditional SDRAM. These chips come in 184-pin varieties, rated in MBps (throughput). A good example of this is something like PC-1600, which is 1600 MBps throughput.</p>
<p id="N10694" lang="">DDR2 SDRAM is double double data rate SDRAM, which has a higher<span> </span><a aria-describedby="N10698" class="extra" id=""></a>latency<span> </span>but faster access to the external bus. These chips have 240 pins to connect their modules to the slot, and are also rated in MBps, such as PC2-4200, which is 4200 MBps (or 4.2 GBps).</p>
<p id="N1069F" lang="">DDR3 SDRAM is known as double data rate 3 SDRAM, and is the latest generation of SDRAM in use today. It runs at a lower voltage and is faster than DDR2, but again the latency is increased over the previous DDR2 modules. These modules also have 240 pins, but they are “keyed” differently than DDR2. The “keyed” portion is where the gap in the pins is located, so only a DDR2 will fit in a DDR2 slot, and a DDR3 will fit only in a DDR3 slot. The common notation for these is PC3-10600, where the 10600 is the speed in MBps.</p>
<p id="N106A2" lang="">Rambus direct ram (RDRAM) is also known as RIMM (Rambus in-line memory module). These modules come in a 184-pin variant (16-bit version) and a 232-pin variant (32-bit version). Each empty slot in the motherboard has to have a continuity module (CRIMM) placed inside it, or the motherboard won’t recognize the memory properly. This is not used in recent systems, but was used heavily in Pentium 4 systems. The RDRAM is measured in MBps, such as RIMM 4200 (or 4200 MBps).</p>
<div class="imagewrap"><span class="image"><img alt="Random Access Memory" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image4.jpg" title="Random Access Memory"/></span><span class="caption" lang="">Random Access Memory. Public domain image from<span> </span><a href="https://en.wikipedia.org/wiki/Random-access_memory#/media/File:Memory_module_DDRAM_20-03-2006.jpg" id="_i_1" lang="" target="_blank">Wikipedia</a>.</span></div>
<div class="imagewrap"><strong><strong><span class="caption" lang=""></span></strong></strong>
<p id="N106D1" lang="">There are other variants of memory that have been used over the years, but they are not common today. The single inline memory module, or SIMM, has either 30 or 72 connectors on both sides of the chip. The single inline pin package, or SIPP, has only 30 pins, and they are physical pins instead of connectors.</p>
<p id="N106D4" lang="">Dual inline memory module, or DIMM, is what is used for DDR, DDR2, and DDR3 chips, with each side of the module having different pinouts in the connectors. The SODIMM, small outline DIMM, is a compact version of memory used in laptops, notebooks, and printers. It can come in DDR SODIMM, DDR2 SODIMM, or DDR3 SODIMM. SODIMM is very common and still heavily used today.</p>
<p id="N106D7" lang="">Finally, there is a laptop version of Rambus memory called small outline Rambus module, but it is rarely used in contemporary systems.</p>
<div class="imagewrap"><span class="image"><img alt="Photograph of Small Outline Dual Inline    Memory Module (SODIMM)" class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image5.png" title="Photograph of Small Outline Dual Inline    Memory Module (SODIMM)"/></span><span class="caption" lang="">Small Outline Dual Inline Memory Module (SODIMM). Photo used under CC-BY license from<span> </span><a href="https://flic.kr/p/8Eexuh" id="_i_3" lang="" target="_blank">William Warby</a>.</span></div>
<div class="imagewrap"><span class="caption" lang=""></span></div>
<h3>53頁中英文版</h3>
<div class="section" id="N1068F">
<div class="sectionContain">
<p id="N10696" lang=""><span>內存模塊的寬度由可傳輸的位數決定。內存最初以8位形式出現，但在當前系統中已增加到16位，32位和現在的64位。必須以存儲體的形式添加內存，以確保其寬度等於內存總線的寬度。例如，如果您需要64位，而單個模塊提供64位，則庫中將只有一個模塊。如前所述，雙通道內存需要兩倍的存儲量，因此存儲庫中需要兩個64位（128位）DIMM，而三通道則需要三個。</span></p>
<div class="image shouldbeleft"></div>
</div>
</div>
<div class="section" id="parity_and_ecc">
<div class="sectionContain">
<p id="N106A9" lang=""><span><span>奇偶校驗用於執行基本的錯誤檢查並確保內存內容可靠。</span><span>此內存比非奇偶校驗慢，但增加了服務器和某些台式機工作站所需的可靠性。</span></span></p>
<p id="N106AC" lang=""><span><span>奇偶校驗是一種檢測內存錯誤的相當簡單的方法，沒有任何校正功能。</span><span>奇偶校驗在添加到傳輸數據字符串的單個數據位中表示。</span><span>如果模塊通常具有七個數據位，則將八分之一添加為奇偶校驗位。</span><span>如果模塊通常有八個芯片用於數據，則添加第九個芯片以實現奇偶校驗。</span></span></p>
<p id="N106AF" lang=""><span><span>每個字節都有一個與之關聯的奇偶校驗位。</span><span>在七位組成原始數據的情況下，總共傳輸了八位（七位原始數據位加一個奇偶校驗位）。</span><span>在八位組成原始數據的情況下，總共傳輸九位（八位數據位加一位奇偶校驗位）。</span><span>奇偶校驗位在寫入時設置，然後在讀取時進行計算和比較，以確定自存儲數據以來是否有任何位發生了更改。</span><span>這種類型的檢查僅限於檢測單個位錯誤。</span><span>如果更改了兩位，則奇偶校驗將“通過”，並且允許該錯誤可能破壞數據。</span></span></p>
<p id="N106B2" lang=""><span><span>奇偶校驗可以實現為“ 0”奇偶校驗或“ 1”奇偶校驗。</span><span>存儲字節時，將加零（如果選擇了“ 1”奇偶校驗，則為零）的數目。</span><span>結果存儲在奇偶校驗位中-如果為奇數，則為“ 1”；如果為偶數，則為“ 0”。</span><span>當從內存中讀取該字節時，將再次對這些位進行計數，並將結果與奇偶校驗位中存儲的結果進行比較。</span><span>匹配表示數據從存儲時起就沒有改變（或以結果相同的方式更改了兩位）。</span></span></p>
<p id="N106B5" lang=""><span><span>不管發送的原始數據位數如何，確定奇偶校驗位的過程都是相同的。</span><span>通常，原始數據有七位或八位。</span></span></p>
<p id="N106B8" lang=""><span><span>奇偶校驗位是通過對數據字符串中“ 1”位的數量進行計數來確定的。</span></span></p>
<table align="center" cellspacing="0" class="wbtable" lang="">
<thead>
<tr>
<th lang=""></th>
<th align="center" colspan="2" lang=""><span><span>將奇偶校驗位設置為：</span></span></th>
</tr>
<tr>
<th lang=""></th>
<th lang=""><span><span>平價</span></span></th>
<th lang=""><span><span>奇數平價</span></span></th>
</tr>
</thead>
<tbody>
<tr class="e">
<th lang=""><span><span>偶數個“ 1”位</span></span></th>
<td align="center" lang=""><span><span>0</span></span></td>
<td align="center" lang=""><span><span>1個</span></span></td>
</tr>
<tr>
<th lang=""><span><span>奇數個“ 1”位</span></span></th>
<td align="center" lang=""><span><span>1個</span></span></td>
<td align="center" lang=""><span><span>0</span></span></td>
</tr>
</tbody>
</table>
<div class="examplewrap">
<div class="exHead"><span class="scnReader"><span><span>例</span></span></span></div>
<div class="example clearfix">
<h5></h5>
<div>
<p id="N106F1" lang=""><span><span>使用偶校驗發送八位原始數據11110000。</span><span>要確定奇偶校驗位（數據的第9位），請計算數據字符串中“ 1”位的數量。</span><span>在這種情況下，有四個“ 1”位。</span><span>因為“ 1”位的總數是四，所以數據是偶數。</span><span>因此，奇偶校驗位設置為0。</span></span></p>
<div class="image shouldbeleft"><img alt="原始數據11110000，末尾添加了第九個附加位，表示奇偶校驗為0" class="popimg" id="_i_1" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image17.png" title="原始數據11110000，末尾添加了第九個附加位，表示奇偶校驗為0"/></div>
</div>
</div>
</div>
<div class="examplewrap">
<div class="exHead"><span class="scnReader"><span><span>例</span></span></span></div>
<div class="example clearfix">
<h5></h5>
<div>
<p id="N106FC" lang=""><span><span>使用奇偶校驗傳輸七位原始數據1000010。</span><span>要確定奇偶校驗位（數據的第八位），請計算數據字符串中“ 1”位的數量。</span><span>在這種情況下，有兩個“ 1”位。</span><span>因此，將奇偶校驗位設置為1，因為數據中“ 1”位（兩個）的總數是偶數，這與傳輸的奇數奇偶校驗不匹配。</span><span>由於“ 1”位的數量和奇偶校驗設置（奇數）不匹配，因此必須將奇偶校驗位設置為1。由於“ 1”位的總數為2，因此將奇偶校驗位“ 1”添加到該字符串將在整個八位字符串（七個數據位加一個奇偶校驗位）中產生奇數個“ 1”位（三個）。</span></span></p>
<div class="image shouldbeleft"><img alt="原始數據1000010，末尾添加了第九個奇偶校驗位" class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image18.png" title="原始數據1000010，末尾添加了第九個奇偶校驗位"/></div>
</div>
</div>
</div>
<p id="N10705" lang=""><span><span>由於所有</span></span><a aria-describedby="N10709" class="extra" id=""></a><span><span>軟錯誤</span></span><span><span><span> </span>中</span><span>約有90％<span> </span></span><span>是單比特類型的，因此奇偶校驗通常在大多數情況下就足夠了。</span><span>不幸的是，由於要花費額外的時鐘週期來計算，存儲和獲取奇偶校驗位，因此錯誤檢查要付出一定的代價，這會稍微降低性能。</span><span>另一個考慮因素是，由於無法通過奇偶校驗解決錯誤，因此實際上必須停止應用程序，並發出一條錯誤消息，指出遇到奇偶校驗錯誤。</span></span></p>
<table class="table labeled" id="N10711_bx">
<tfoot>
<tr>
<td class="captionwrap"><span class="caption" lang=""><span><span>原始數據（七位或八位）以及相應的奇偶校驗位。</span></span></span></td>
</tr>
</tfoot>
<tbody>
<tr>
<td>
<table align="center" cellspacing="0" class="wbtable" lang="">
<thead>
<tr>
<th lang=""><span><span>原始數據</span></span></th>
<th lang=""><span><span>“ 1”位的計數</span></span></th>
<th colspan="2" lang=""><span><span>傳輸的位（8位或9位，取決於原始位的數量），包括奇偶校驗</span></span></th>
</tr>
<tr>
<th lang=""></th>
<th lang=""></th>
<th lang=""><span><span>平價</span></span></th>
<th lang=""><span><span>奇校驗</span></span></th>
</tr>
</thead>
<tbody>
<tr class="e">
<td lang=""><span><span>0000000</span></span></td>
<td lang=""><span><span>0</span></span></td>
<td lang=""><span><span>0000000<span> </span></span></span><em class="bold" lang=""><span><span>0</span></span></em></td>
<td lang=""><span><span>0000000<span> </span></span></span><em class="bold" lang=""><span><span>1</span></span></em></td>
</tr>
<tr>
<td lang=""><span><span>0101101</span></span></td>
<td lang=""><span><span>4</span></span></td>
<td lang=""><span><span>0101101<span> </span></span></span><em class="bold" lang=""><span><span>0</span></span></em></td>
<td lang=""><span><span>0101101<span> </span></span></span><em class="bold" lang=""><span><span>1</span></span></em></td>
</tr>
<tr class="e">
<td lang=""><span><span>0101010</span></span></td>
<td lang=""><span><span>3</span></span></td>
<td lang=""><span><span>0101010<span> </span></span></span><em class="bold" lang=""><span><span>1</span></span></em></td>
<td lang=""><span><span>0101010<span> </span></span></span><em class="bold" lang=""><span><span>0</span></span></em></td>
</tr>
<tr>
<td lang=""><span><span>10000000</span></span></td>
<td lang=""><span><span>1個</span></span></td>
<td lang=""><span><span>1000000<span> </span></span></span><em class="bold" lang=""><span><span>1</span></span></em></td>
<td lang=""><span><span>10000000<span> </span></span></span><em class="bold" lang=""><span><span>0</span></span></em></td>
</tr>
<tr class="e">
<td lang=""><span><span>11111100</span></span></td>
<td lang=""><span><span>6</span></span></td>
<td lang=""><span><span>11111100<span> </span></span></span><em class="bold" lang=""><span><span>0</span></span></em></td>
<td lang=""><span><span>11111100<span> </span></span></span><em class="bold" lang=""><span><span>1</span></span></em></td>
</tr>
<tr>
<td lang=""><span><span>10001100</span></span></td>
<td lang=""><span><span>3</span></span></td>
<td lang=""><span><span>10001100<span> </span></span></span><em class="bold" lang=""><span><span>1</span></span></em></td>
<td lang=""><span><span>10001100<span> </span></span></span><em class="bold" lang=""><span><span>0</span></span></em></td>
</tr>
</tbody>
</table>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<div actguid="d87f2ded0a0001dc588f7e25e5e2fac4" class="asx" inlineparams="inlineClient=%2Fsuperactivity%2Fassessment2%2FInlineAssessmentClient.swf&amp;activityMode=delivery&amp;activityContextGUID=d87f2ded0a0001dc588f7e25e5e2fac4&amp;userGUID=40923111&amp;activityService=%2Fjcourse%2Fa2%2Frest&amp;webContentPath=%2Frepository%2Fwebcontent%2Fd826575d0a0001dc3e9f244fa018c560%2F&amp;logService=%2Flog%2Fserver&amp;">
<div class="activitywrap purpose didigetthis flash" id="dpch06_digt01">
<div class="activityhead"></div>
<h3>53頁英文版</h3>
<div class="activityhead">
<div class="section" id="N1068F">
<div class="sectionContain"></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h4>Memory Module Width</h4>
<p id="N10696" lang="">Memory module width is measured by the number of bits that can be transferred. Memory began in 8-bit varieties, but has increased to 16 bits, 32 bits, and now 64 bits in current systems. Memory must be added in banks to ensure the width equals the width of the memory bus. For example, if you need 64 bits and a single module offers 64 bits, then it will have one module in the bank. Dual-channel memory requires double the amount, therefore two 64-bit (128 bit) DIMMs are needed in the banks, while three are required for triple-channel, as was mentioned earlier.</p>
<div class="image shouldbeleft"><img alt="Representation of 1byte      characters (numbers 1,2, and 3)in binary code." class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image6.png" title="Representation of 1byte      characters (numbers 1,2, and 3)in binary code."/></div>
</div>
<div class="section" id="parity_and_ecc">
<div class="sectionContain">
<p id="N106A9" lang="">Parity is used to perform basic error checking and to ensure the memory contents are reliable. This memory is slower than non-parity, but adds the reliability needed for servers and certain desktop workstations.</p>
<p id="N106AC" lang="">Parity checking is a rather simple method of detecting memory errors, without any correction capabilities. Parity is signified in a single bit of data that is added to the transmitted data string. If the module normally would have seven bits of data, an eighth is added as the parity bit. If the module normally would have eight chips for data, a ninth chip is added for parity.</p>
<p id="N106AF" lang="">Every byte has a parity bit associated with it. In the case that seven bits make up the original data, there are eight total bits transmitted (seven original data bits plus one parity bit). In the case that eight bits make up the original data, a total of nine bits are transmitted (eight data bits plus one parity bit). The parity bit is set at write time, and then calculated and compared at read time to determine if any of the bits have changed since the data was stored. This type of checking is limited to detection of single bit errors. If two bits have been altered, the parity check will “pass,” and the error is allowed to possibly corrupt the data.</p>
<p id="N106B2" lang="">Parity checking can be implemented either as “0” parity or “1” parity. When the byte is stored, the number of zeros (or ones, if “1” parity is selected) is added up. The result is stored in the parity bit – “1” if odd, “0” if even. When that byte is read from memory, the bits are again counted and the result is compared against what was stored in the parity bit. A match means that the data was not changed from when it was stored (or that two bits were altered in such a way that the result is the same).</p>
<p id="N106B5" lang="">The process to determine the parity bit is the same, regardless of the number of original data bits transmitted. Typically, there are either seven or eight bits of original data.</p>
<p id="N106B8" lang="">The parity bit is determined by counting the number of “1” bits in a data string.</p>
<table align="center" cellspacing="0" class="wbtable" lang="">
<thead>
<tr>
<th lang=""></th>
<th align="center" colspan="2" lang="">Set parity bit to:</th>
</tr>
<tr>
<th lang=""></th>
<th lang="">Even parity</th>
<th lang="">Odd parity</th>
</tr>
</thead>
<tbody>
<tr class="e">
<th lang="">Even number of “1” bits</th>
<td align="center" lang="">0</td>
<td align="center" lang="">1</td>
</tr>
<tr>
<th lang="">Odd number of “1” bits</th>
<td align="center" lang="">1</td>
<td align="center" lang="">0</td>
</tr>
</tbody>
</table>
<div class="examplewrap">
<div class="exHead"><span class="scnReader">EXAMPLE</span></div>
<div class="example clearfix">
<h5></h5>
<div>
<p id="N106F1" lang="">Eight bits of original data, 11110000, are transmitted using even parity. To determine the parity bit (the ninth bit of data), count the number of “1” bits in the data string. In this case, there are four “1” bits. Because the total number of “1” bits is four, the data is even. Therefore, the parity bit is set to 0.</p>
<div class="image shouldbeleft"><img alt="Original data 11110000 with an additional ninth bit added on the end to represent a parity of 0" class="popimg" id="_i_1" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image17.png" title="Original data 11110000 with an additional ninth bit added on the end to represent a parity of 0"/></div>
</div>
</div>
</div>
<div class="examplewrap">
<div class="exHead"><span class="scnReader">EXAMPLE</span></div>
<div class="example clearfix">
<h5></h5>
<div>
<p id="N106FC" lang="">Seven bits of original data, 1000010, are transmitted using odd parity. To determine the parity bit (the eighth bit of data), count the number of “1” bits in the data string. In this case, there are two “1” bits. Therefore the parity bit is set to 1, because the total number of “1” bits (two) in the data is even, which does not match the odd parity of the transmission. Because of the mismatch in the number of “1” bits and the parity setting (odd), the parity bit must be set to 1. Because the total number of “1” bits is two, adding a parity bit of “1” to the string will result in an odd number of “1” bits (three) in the full eight-bit string (seven data bits plus one parity bit).</p>
<div class="image shouldbeleft"><img alt="Original data 1000010 with an additional ninth bit added on the end to represent a parity of 1" class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image18.png" title="Original data 1000010 with an additional ninth bit added on the end to represent a parity of 1"/></div>
</div>
</div>
</div>
<p id="N10705" lang="">Since about 90 percent of all<span> </span><a aria-describedby="N10709" class="extra" id=""></a>soft errors<span> </span>are of the single bit kind, parity checking is usually quite sufficient for most situations. Unfortunately, there is a penalty to be paid for error checking, which is slightly slower performance, since there are extra clock cycles spent in calculating, storing, and fetching the parity bit. One other consideration is that since the error cannot be fixed by parity, the application must actually be stopped and an error message issued indicating that a parity error was encountered.</p>
<table class="table labeled" id="N10711_bx">
<tfoot>
<tr>
<td class="captionwrap"><span class="caption" lang="">Original data (seven or eight bits) and the corresponding parity bit for even and odd parity.</span></td>
</tr>
</tfoot>
<tbody>
<tr>
<td>
<table align="center" cellspacing="0" class="wbtable" lang="">
<thead>
<tr>
<th lang="">Original data</th>
<th lang="">Count of “1” bits</th>
<th colspan="2" lang="">Bits transmitted (8 or 9, depending on number of original bits), including parity</th>
</tr>
<tr>
<th lang=""></th>
<th lang=""></th>
<th lang="">Even Parity</th>
<th lang="">Odd Parity</th>
</tr>
</thead>
<tbody>
<tr class="e">
<td lang="">0000000</td>
<td lang="">0</td>
<td lang="">0000000<em class="bold" lang="">0</em></td>
<td lang="">0000000<em class="bold" lang="">1</em></td>
</tr>
<tr>
<td lang="">0101101</td>
<td lang="">4</td>
<td lang="">0101101<em class="bold" lang="">0</em></td>
<td lang="">0101101<em class="bold" lang="">1</em></td>
</tr>
<tr class="e">
<td lang="">0101010</td>
<td lang="">3</td>
<td lang="">0101010<em class="bold" lang="">1</em></td>
<td lang="">0101010<em class="bold" lang="">0</em></td>
</tr>
<tr>
<td lang="">10000000</td>
<td lang="">1</td>
<td lang="">1000000<em class="bold" lang="">1</em></td>
<td lang="">10000000<em class="bold" lang="">0</em></td>
</tr>
<tr class="e">
<td lang="">11111100</td>
<td lang="">6</td>
<td lang="">11111100<em class="bold" lang="">0</em></td>
<td lang="">11111100<em class="bold" lang="">1</em></td>
</tr>
<tr>
<td lang="">10001100</td>
<td lang="">3</td>
<td lang="">10001100<em class="bold" lang="">1</em></td>
<td lang="">10001100<em class="bold" lang="">0</em></td>
</tr>
</tbody>
</table>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<div actguid="d87f2dec0a0001dc2eb08dff6eb5429d" class="asx" inlineparams="inlineClient=%2Fsuperactivity%2Fassessment2%2FInlineAssessmentClient.swf&amp;activityMode=delivery&amp;activityContextGUID=d87f2dec0a0001dc2eb08dff6eb5429d&amp;userGUID=40923111&amp;activityService=%2Fjcourse%2Fa2%2Frest&amp;webContentPath=%2Frepository%2Fwebcontent%2Fd826575d0a0001dc3e9f244fa018c560%2F&amp;logService=%2Flog%2Fserver&amp;">
<div class="activitywrap purpose learnbydoing flash" id="dpch06_lbd04">
<div class="activityhead"></div>
</div>
</div>
<div actguid="d87f2de80a0001dc2459cd57dc75a254" class="asx" inlineparams="inlineClient=%2Fsuperactivity%2Fassessment2%2FInlineAssessmentClient.swf&amp;activityMode=delivery&amp;activityContextGUID=d87f2de80a0001dc2459cd57dc75a254&amp;userGUID=40923111&amp;activityService=%2Fjcourse%2Fa2%2Frest&amp;webContentPath=%2Frepository%2Fwebcontent%2Fd826575d0a0001dc3e9f244fa018c560%2F&amp;logService=%2Flog%2Fserver&amp;">
<h3>54頁中英版</h3>
</div>
<p><br/><span class="image"><img alt="內存模塊或“棒”的照片。" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image8.png" title="內存模塊或“棒”的照片。"/></span><span class="caption" lang=""><span><span>內存模塊或“棒”。</span></span><a href="https://flic.kr/p/8an1cX" id="_i_1" lang="" target="_blank"><span><span>這張</span></span></a><span><span>照片是由</span><a href="https://flic.kr/p/8an1cX" id="_i_1" lang="" target="_blank"><span>Yutaka Tsutano</span></a><span>根據CC-BY許可</span><a href="https://flic.kr/p/8an1cX" id="_i_1" lang="" target="_blank"><span>使用的</span></a><span>。</span></span></span></p>
<h4>安裝記憶棒的過程相當容易，但是必須謹慎且精確。要安裝記憶棒（或模塊）：</h4>
<ol lang="">
<li lang="">
<h4>始終確保採取適當的ESD（靜電釋放）保護措施，以確保在安裝過程中不會損壞主板和內存模塊。</h4>
</li>
<li lang="">
<h4>關閉計算機電源，然後拔下電源線。</h4>
</li>
<li lang="">
<h4>打開外殼，開始安裝記憶棒。始終將記憶棒放在芯片的側面，而不要緊握金觸點。</h4>
</li>
<li lang="">
<h4>將內存模塊的連接器與主板上的插槽對齊。</h4>
</li>
<li lang="">
<h4>確認鎖定卡舌處於打開位置。</h4>
</li>
<li lang="">
<h4>垂直向下推動模塊，直到卡舌旋轉到鎖定位置（需要用力）。</h4>
</li>
</ol>
<h4>重要說明：切勿觸摸模塊上的金色連接器！觸點可能會腐蝕，或者由於靜電放電會損壞模塊。</h4>
<p><br/><span><span>要了解有關如何安裝RAM的更多信息，請訪問</span></span><a href="http://www.wikihow.com/Install-RAM" id="_i_2" lang="" target="_blank"><span><span>www.wikihow.com/Install-RAM</span></span></a><span><span>。</span></span></p>
<div class="youtube" id="uwrap__i_3"><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" enablejsapi="1" frameborder="0" height="360" id="_i_3" src="https://www.youtube.com/embed/WzKUVZdIr10?enablejsapi=1&amp;rel=0&amp;vq=large" width="640"></iframe></div>
<p><br/><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" enablejsapi="1" frameborder="0" height="360" id="_i_4" src="https://www.youtube.com/embed/bmRMRlDXph0?enablejsapi=1&amp;rel=0&amp;vq=large" width="640"></iframe></p>
<div class="youtube">
<h3>54頁英文版</h3>
<p id="N10688" lang="">Installing memory is a common computer upgrade and a very easy task to perform. Memory modules are installed as “sticks” (or modules) of memory into the “slots” on the motherboard.</p>
<div class="imagewrap"><span class="image"><img alt="Photograph of memory modules or “sticks.”" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image8.png" title="Photograph of memory modules or “sticks.”"/></span><span class="caption" lang="">Memory modules or “sticks.” Photo used under CC-BY license from<span> </span><a href="https://flic.kr/p/8an1cX" id="_i_1" lang="" target="_blank">Yutaka Tsutano</a>.</span></div>
<p id="N10698" lang="">The process of installing memory sticks is fairly easy, but caution and precision are necessary. To install memory sticks (or modules):</p>
<ol lang="">
<li lang="">Always ensure you take proper ESD (electrostatic discharge) protection measures to ensure both the motherboard and memory modules are not harmed during installation.</li>
<li lang="">Turn off the computer and unplug the power cord.</li>
<li lang="">Open the case and begin the installation of the memory sticks. Always hold the memory sticks by the sides of the chips and never by the gold contacts.</li>
<li lang="">Line up the memory module’s connector with the slot on the motherboard.</li>
<li lang="">Verify that the locking tabs are in the open position.</li>
<li lang="">Push the module straight down until the tabs swivel to the locking position (this takes force).</li>
</ol>
<p id="N106B0" lang="">Important note: Never touch the gold connectors on the modules! Corrosion of the contacts can occur, or the module may be damaged due to electrostatic discharge.</p>
<p id="N106B3" lang="">To explore more about how to install RAM, visit<span> </span><a href="http://www.wikihow.com/Install-RAM" id="_i_2" lang="" target="_blank">www.wikihow.com/Install-RAM</a>.</p>
<div>
<div class="youtube" id="uwrap__i_3"><iframe allowfullscreen="allowfullscreen" enablejsapi="1" frameborder="0" height="360" id="_i_3" src="https://www.youtube.com/embed/WzKUVZdIr10?enablejsapi=1&amp;rel=0&amp;vq=large" width="640"></iframe></div>
</div>
<div>
<div class="youtube" id="uwrap__i_4"><iframe allowfullscreen="allowfullscreen" enablejsapi="1" frameborder="0" height="360" id="_i_4" src="https://www.youtube.com/embed/bmRMRlDXph0?enablejsapi=1&amp;rel=0&amp;vq=large" width="640"></iframe></div>
<h3>55頁中英版</h3>
<p id="N10678" lang=""><span>打開計算機電源後，計算機的微處理器會使用稱為</span><em class="bold" lang=""><span>BIOS</span></em><span>（基本輸入/輸出系統）的程序來啟動計算機系統。BIOS還管理計算機操作系統和已連接/已連接的設備（例如硬盤驅動器，視頻適配器，鍵盤，鼠標和打印機）之間的數據流。</span></p>
<div class="imagewrap"><span class="image"><img alt="基本輸入/輸出系統（BIOS）芯片的照片。" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image9.png" title="基本輸入/輸出系統（BIOS）芯片的照片。"/></span><span class="caption" lang=""><span><span>基本輸入/輸出系統（BIOS）芯片。</span></span><a href="https://flic.kr/p/6d1KXy" id="_i_1" lang="" target="_blank"><span><span>Uwe Hermann</span></span></a><span><span>根據CC-BY-SA許可使用的照片</span><span>。</span></span></span></div>
<p id="N1068E" lang=""><span><span>計算機的BIOS是最常見的</span></span><span class="term" lang=""><span><span>固件</span></span></span><span><span>示例</span><span>。</span><span>固件是芯片上的軟件，是計算機啟動時計算機運行的第一個軟件。</span><span>BIOS具有多個角色，包括執行開機自檢，該自檢將測試並初始化處理器，視頻卡，磁盤驅動器和適配器。</span><span>BIOS還包括用於計算機的低級“操作系統”，它使計算機可以從最基本的組件（包括鍵盤，鼠標和磁盤驅動器）獲取輸入並提供輸出。</span><span>BIOS存儲在ROM（只讀存儲器）芯片中，但可以通過過程調用“刷新”進行升級。</span></span></p>
<p id="N10694" lang=""><span><span>BIOS是允許用戶更改設置的程序，而設置本身則存儲在互補金屬氧化物半導體或<span> </span></span></span><span class="term" lang=""><span><span>CMOS中</span></span></span><span><span>。</span><span>CMOS是電池供電的存儲芯片。</span></span></p>
<div class="section" id="N1069A">
<div class="sectionContain">
<p id="N106A1" lang=""><span><span>BIOS用於配置通用設置，例如計算機讀取設備的順序。</span><span>此命令稱為引導命令。</span><span>此外，BIOS還用於配置打開和關閉各種輸入/輸出端口的設置，以及各種CPU設置（例如<span> </span></span></span><a aria-describedby="N106A5" class="extra" id=""></a><span><span>虛擬化</span></span><span><span>和<span> </span></span></span><a aria-describedby="N106AE" class="extra" id=""></a><span><span>超頻）的配置</span></span><span><span>。</span></span></p>
<p id="N106B6" lang=""><span><span>更改BIOS時要非常小心。</span><span>不正確的設置可能會使您的計算機無法啟動。</span></span></p>
<div class="imagewrap"><span class="image"><img alt="基本輸入/輸出系統（BIOS）設置實用程序的照片。" class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image10.png" title="基本輸入/輸出系統（BIOS）設置實用程序的照片。"/></span><span class="caption" lang=""><span><span>基本的輸入/輸出系統（BIOS）設置實用程序。</span><span>照片由</span></span><a href="https://flic.kr/p/6u6itT" id="_i_3" lang="" target="_blank"><span><span>OI123</span></span></a><span><span>根據CC-BY許可</span><a href="https://flic.kr/p/6u6itT" id="_i_3" lang="" target="_blank"><span>使用</span></a><span>。</span></span></span></div>
<p id="N106C8" lang=""><span><span>BIOS配置以下設置：</span></span></p>
<ul lang="">
<li lang=""><span><span>引導順序</span></span></li>
<li lang=""><span><span>存儲設備（USB驅動器，硬盤驅動器，軟盤驅動器，光盤驅動器）</span></span></li>
<li lang=""><span><span>內置端口（SATA，eSATA，PATA，USB，IEEE-1394，串行，並行，PS / 2）</span></span></li>
<li lang=""><span><span>AGP，PCI，PCIe插槽</span></span></li>
<li lang=""><span><span>集成芯片組（音頻，視頻，網絡）</span></span></li>
<li lang=""><span><span>虛擬化</span></span></li>
<li lang=""><span><span>時鐘速度</span></span></li>
<li lang=""><span><span>記憶體（RAM）</span></span></li>
<li lang=""><span><span>能源管理</span></span></li>
<li lang=""><span><span>入侵檢測</span></span></li>
<li lang=""><span><span>密碼和加密</span></span></li>
<li lang=""><span><span>PC健康工具（溫度，電壓等）</span></span></li>
<li lang=""><span><span>直接訪問Web或其他服務，而無需啟動計算機（特定於UEFI）</span></span></li>
</ul>
<p id="N106F5" lang=""><span><span>在計算機上按下電源按鈕時，引導過程的第一步是開機自檢，稱為</span></span><span class="term" lang=""><span><span>POST</span></span></span><span><span>。</span><span>成功進行POST後，BIOS將從CMOS中讀取設置，然後BIOS從已配置的引導設備中尋找操作系統。</span><span>找到操作系統後，操作系統的引導加載程序將開始操作系統引導過程，並將計算機的控制權移交給操作系統。</span></span></p>
<div class="image shouldbeleft"><img alt="啟動過程的圖形描述，從BIOS開始，移至OS加載程序代碼，並以OS啟動結束。" class="popimg" id="_i_4" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image11.png" title="啟動過程的圖形描述，從BIOS開始，移至OS加載程序代碼，並以OS啟動結束。"/></div>
<p id="N10700" lang=""><span><span>引導過程：</span></span></p>
<ol lang="">
<li lang=""><span><span>打開計算機電源。</span></span></li>
<li lang=""><span><span>BIOS執行開機自檢（POST）。</span></span></li>
<li lang=""><span><span>BIOS從CMOS讀取設置。</span></span></li>
<li lang=""><span><span>BIOS從配置的引導設備中查找操作系統。</span></span><span><span></span></span></li>
</ol>
</div>
</div>
</div>
</div>
<p></p>
<h3>55頁英文版</h3>
<p id="N10678" lang="">When a computer is turned on, the computer’s microprocessor uses a program called the<span> </span><em class="bold" lang="">BIOS</em><span> </span>(basic input/output system) to start the computer system. The BIOS also manages data flow between the computer's operating system and attached/connected devices, such as the hard drive, video adapter, keyboard, mouse, and printer.</p>
<div class="imagewrap"><span class="image"><img alt="Photograph of a basic input/output system    (BIOS) chip." class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image9.png" title="Photograph of a basic input/output system    (BIOS) chip."/></span><span class="caption" lang="">A basic input/output system (BIOS) chip. Photo used under CC-BY-SA license from<span> </span><a href="https://flic.kr/p/6d1KXy" id="_i_1" lang="" target="_blank">Uwe Hermann</a>.</span></div>
<p id="N1068E" lang="">A computer’s BIOS is the most common example of<span> </span><span class="term" lang="">firmware</span>. Firmware is software on a chip, and is the first software run by the computer when the machine is booted up. The BIOS has several roles, including performing the power-on self-test, which tests and initializes the processor, video card, disk drives, and adapters. The BIOS also includes the low-level “operating system” for the computer, which allows the computer to take input from and give output to the most basic components, including the keyboard, mouse, and disk drives. The BIOS is stored in a ROM (Read-only memory) chip, but can be upgraded through a process call “flashing.”</p>
<p id="N10694" lang="">While the BIOS is a program that allows the user to make changes to the settings, the settings themselves are stored in the complementary metal-oxide semiconductor, or<span> </span><span class="term" lang="">CMOS</span>. The CMOS is a battery-powered memory chip.</p>
<div class="section" id="N1069A">
<div class="sectionContain">
<p id="N106A1" lang="">The BIOS is used to configure common settings, such as the order in which devices are read by the computer. This order is known as the boot order. In addition, the BIOS is also used in the configuration of settings that turn on and off various input/output ports, and the configuration of various CPU settings such as<a aria-describedby="N106A5" class="extra" id=""></a>virtualization<span> </span>and<span> </span><a aria-describedby="N106AE" class="extra" id=""></a>overclocking<span> </span>.</p>
<p id="N106B6" lang="">Be very careful when making changes to the BIOS. Incorrect settings may keep your computer from booting.</p>
<div class="imagewrap"><span class="image"><img alt="Photograph of a basic       input/output system (BIOS) setup utility." class="popimg" id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image10.png" title="Photograph of a basic       input/output system (BIOS) setup utility."/></span><span class="caption" lang="">A basic input/output system (BIOS) setup utility. Photo used under CC-BY license from<span> </span><a href="https://flic.kr/p/6u6itT" id="_i_3" lang="" target="_blank">OI123</a>.</span></div>
<p id="N106C8" lang="">BIOS configures the following settings:</p>
<ul lang="">
<li lang="">Boot order</li>
<li lang="">Storage devices (USB drives, hard drives, floppy drives, optical drives)</li>
<li lang="">Built-in ports (SATA, eSATA, PATA, USB, IEEE-1394, serial, parallel, PS/2)</li>
<li lang="">AGP, PCI, PCIe slots</li>
<li lang="">Integrated chipsets (audio, video, network)</li>
<li lang="">Virtualization</li>
<li lang="">Clock speed</li>
<li lang="">Memory (RAM)</li>
<li lang="">Power management</li>
<li lang="">Intrusion detection</li>
<li lang="">Passwords and encryption</li>
<li lang="">PC health tools (temperature, voltage, etc.)</li>
<li lang="">Direct access to the web or other services without booting computer (UEFI specific)</li>
</ul>
<p id="N106F5" lang="">When the power button is pressed on the computer, the first step in the boot process is the power-on self-test, called the<span> </span><span class="term" lang="">POST</span>. Once a successful POST occurs, the BIOS reads the settings from the CMOS, and the BIOS looks for an operating system from the configured boot devices. Once it finds the operating system, the operating system’s boot loader begins the operating system boot process, and turns over control of the computer to the operating system.</p>
<div class="image shouldbeleft"><img alt="Graphic depiction of the boot      process starting with BIOS, moving to OS loader code and ending with OS      start." class="popimg" id="_i_4" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image11.png" title="Graphic depiction of the boot      process starting with BIOS, moving to OS loader code and ending with OS      start."/></div>
<p id="N10700" lang="">The boot process:</p>
<ol lang="">
<li lang="">Power on computer.</li>
<li lang="">BIOS performs power-on self-test (POST).</li>
<li lang="">BIOS reads settings from CMOS.</li>
<li lang="">BIOS looks for operating system from configured boot device.</li>
</ol>
<h3>56頁中英版</h3>
<p id="N10688" lang=""><span>CMOS（互補金屬氧化物半導體）是電池供電的存儲芯片。它是非易失性存儲器，用於存儲BIOS設置，並內置在主板中。只要電池電量剩餘，就會向CMOS提供DC（直流電）並保留設置。如果計算機不斷丟失設置，則需要更換電池。較舊的CMOS電池型號使用DS12887A電池或AA尺寸的3.6伏Eternacell電池，通常可以使用大約三年。較新的CMOS型號包括內置鋰離子電池，該電池可使用長達10年。當前使用的最典型的外部電池是CR2032，它類似於標準的手錶電池。當電池開始出現故障時，向用戶顯示的第一個信號是系統時鐘經常浪費時間。</span></p>
<div class="imagewrap"><span class="image"><img alt="CMOS內存和電池的照片。" class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image12.png" title="CMOS內存和電池的照片。"/></span><span class="caption" lang=""><span><span>CMOS內存和電池。</span><span>由</span></span><a href="https://flic.kr/p/6jihGa" id="_i_1" lang="" target="_blank"><span><span>nbpeterson</span></span></a><span><span>根據CC-BY-NC許可使用的</span><a href="https://flic.kr/p/6jihGa" id="_i_1" lang="" target="_blank"><span>照片</span></a><span>。</span></span></span></div>
<h3>56頁英文版</h3>
<div class="imagewrap">
<p id="N10688" lang="">The CMOS (complementary metal-oxide semiconductor) is a battery-powered memory chip. It is nonvolatile memory that stores the BIOS settings and is built into the motherboard. As long as battery power remains, DC (direct current) is provided to the CMOS and allows the settings to be retained. If the computer is constantly losing the settings, the battery will need to be replaced. Older CMOS battery models used the DS12887A battery or AA-sized 3.6 volt Eternacell battery, and normally lasted approximately three years. Newer CMOS models include an internal lithium-ion battery that can last for up to 10 years. The most typical current external battery used is the CR2032, which resembles a standard watch battery. When the battery begins to fail, the first sign to the user is that the system clock frequently loses time.</p>
<div class="imagewrap"><span class="image"><img alt="Photograph of the CMOS memory and    battery." class="popimg" id="_i_0" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH06/webcontent/PCH06/image12.png" title="Photograph of the CMOS memory and    battery."/></span><span class="caption" lang="">CMOS memory and battery. Photo used under CC-BY-NC license from<span> </span><a href="https://flic.kr/p/6jihGa" id="_i_1" lang="" target="_blank">nbpeterson</a>.</span></div>
</div>
<div actguid="d87f2e020a0001dc1b98ced8317e3a48" class="asx" inlineparams="inlineClient=%2Fsuperactivity%2Fassessment2%2FInlineAssessmentClient.swf&amp;activityMode=delivery&amp;activityContextGUID=d87f2e020a0001dc1b98ced8317e3a48&amp;userGUID=40923111&amp;activityService=%2Fjcourse%2Fa2%2Frest&amp;webContentPath=%2Frepository%2Fwebcontent%2Fd826575d0a0001dc3e9f244fa018c560%2F&amp;logService=%2Flog%2Fserver&amp;">
<div class="activitywrap purpose learnbydoing flash" id="dpch06_lbd06">
<div class="activityhead"></div>
<h1>第五組</h1>
<p><br/><span>group 5:</span><br/><br/><span>Repository:<span> </span></span><a href="https://github.com/40923105/cp2020">40923105</a><span><span> </span>| Site:<span> </span></span><a href="https://40923105.github.io/cp2020">40923105</a><br/><span>Repository:<span> </span></span><a href="https://github.com/40923109/cp2020">40923109</a><span><span> </span>| Site:<span> </span></span><a href="https://40923109.github.io/cp2020">40923109</a><br/><span>Repository:<span> </span></span><a href="https://github.com/40923110/cp2020">40923110</a><span><span> </span>| Site:<span> </span></span><a href="https://40923110.github.io/cp2020">40923110</a><br/><span>Repository:<span> </span></span><a href="https://github.com/40923111/cp2020">40923111</a><span><span> </span>| Site:<span> </span></span><a href="https://40923111.github.io/cp2020">40923111</a><br/><span>Repository:<span> </span></span><a href="https://github.com/40923122/cp2020">40923122</a><span><span> </span>| Site:<span> </span></span><a href="https://40923122.github.io/cp2020">40923122</a><br/><span>Repository:<span> </span></span><a href="https://github.com/40923130/cp2020">40923130</a><span><span> </span>| Site:<span> </span></span><a href="https://40923130.github.io/cp2020">40923130</a><br/><span>Repository:<span> </span></span><a href="https://github.com/40923134/cp2020">40923134</a><span><span> </span>| Site:<span> </span></span><a href="https://40923134.github.io/cp2020">40923134</a><br/><span>Repository:<span> </span></span><a href="https://github.com/40923135/cp2020">40923135</a><span><span> </span>| Site:<span> </span></span><a href="https://40923135.github.io/cp2020">40923135</a><span><span> </span>(組長)</span><br/><span>Repository:<span> </span></span><a href="https://github.com/40923139/cp2020">40923139</a><span><span> </span>| Site:<span> </span></span><a href="https://40923139.github.io/cp2020">40923139</a><br/><span>Repository:<span> </span></span><a href="https://github.com/40923143/cp2020">40923143</a><span><span> </span>| Site:<span> </span></span><a href="https://40923143.github.io/cp2020">40923143</a><br/><span>Repository:<span> </span></span><a href="https://github.com/40923153/cp2020">40923153</a><span><span> </span>| Site:<span> </span></span><a href="https://40923153.github.io/cp2020">40923153</a></p>
<p></p>
<h1>解救蔡英文</h1>
<p></p>
<p>曾經錯過沒有關係, 但若因為終身菜英文而錯失美好未來, 著實可惜. 解救菜英文就從現在開始.</p>
<p>先從<a href="https://www.talkenglish.com/vocabulary/top-2000-vocabulary.aspx">最常用的 2000 個英文字彙</a>開始.</p>
<p>國中英語字彙<span> </span><a href="http://mde.tw/cp2020/downloads/2000_words.txt">2000 字</a></p>
<p>普通高中 4500 -7000 字</p>
<p>技職與綜合高中 4000 -<span> </span><a href="http://mde.tw/cp2020/downloads/5000_words.txt">5500 字</a></p>
<h4>自行寫程式兼學英文字彙:</h4>
<p>假如能夠配合 <a href="https://github.com/mdecourse/lookupdict">https://github.com/mdecourse/lookupdict</a><span> </span>從 Webster 英英字典中整理出<span> </span><a href="http://mde.tw/cp2020/downloads/5000_words.txt">5500 字</a><span> </span>的英文說明, 並逐字研讀, 應該是解救菜英文最佳手段.</p>
<h4>使用電腦學習英文字彙:</h4>
<p>另一項學習英文字彙的方式則是利用電腦或筆電下載安裝<span> </span><a href="https://github.com/ankitects/anki">Anki</a>, 然後導入<span> </span><a href="https://ankiweb.net/shared/info/1104981491">4000 英文單字</a>學習模組, 就可以開始學習了. Anki 還有其他<a href="https://ankiweb.net/shared/decks/english">學習英文的 Decks</a>.<span></span></p>
<h4>使用手機學習英文字彙:</h4>
<p>在手機上安裝<a href="https://apps.apple.com/tw/app/%E6%9F%A5%E6%9F%A5%E5%96%AE%E5%AD%97/id1482901273">查查單字</a><span> </span>Apps (Android<span> </span><a href="https://play.google.com/store/apps/details?id=tiny.biscuit.assistant2">查查英文</a>).</p>
<p>在手機上安裝<span> </span><a href="https://itenyh.github.io/AnkiDict/">Anki英辞</a><span> </span>Apps, 這是以<span> </span><a href="https://github.com/skywind3000/ECDICT">https://github.com/skywind3000/ECDICT</a><span> </span>英漢字典內容為基礎的 Anki 學習套件, 使用者可以將所查詢的英文單字解釋內容設為 Anki 字詞, 進一步作為暗記英文字彙的有效工具.</p>
<p>常用的 2000 + 800 個英文字彙</p>
<h1>Arston martin</h1>
</div>
<div class="activitywrap purpose learnbydoing flash"><br/>
<p><img caption="false" height="500" src="/images/02191713-dbs-superleggera_cover_1920x1200.jpg" width="800"/></p>
<h1>HW3</h1>
<h2>P10</h2>
List Overlap comprehensions</div>
<div class="activitywrap purpose learnbydoing flash"></div>
<div class="activitywrap purpose learnbydoing flash">Exercise 10 (and<span> </span><a href="https://www.practicepython.org/solution/2014/04/16/10-list-overlap-comprehensions-solutions.html">Solution</a>)
<p>This week’s exercise is going to be revisiting an old exercise (see<span> </span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html">Exercise 5</a>), except require the solution in a different way.</p>
<p>Take two lists, say for example these two:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p>and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this<span> </span><s>in one line of Python</s><span> </span><em>using at least one list comprehension</em>. (<em>Hint: Remember<span> </span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html">list comprehensions</a><span> </span>from Exercise 7</em>).</p>
<p><em>The original formulation of this exercise said to write the solution using one line of Python, but a few readers pointed out that this was impossible to do without using<span> </span><code class="highlighter-rouge">set</code>s that I had not yet discussed on the blog, so you can either choose to use the original directive and read about the<span> </span><a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=set#set"><code class="highlighter-rouge">set</code><span> </span>command in Python 3.3</a>, or try to implement this on your own and use at least one list comprehension in the solution.</em></p>
<p>Extra:</p>
<ul>
<li>Randomly generate two lists to test this</li>
</ul>
Discussion
<p>Concepts for this week:</p>
<ul>
<li>List comprehensions</li>
<li>Random numbers, continued</li>
</ul>
List comprehensions
<p>We already discussed list comprehensions in<span> </span><a href="http://practicepython.blogspot.com/2014/03/exercise-7-list-comprehensions.html">Exercise 7</a>, but they can be made much more complicated.</p>
<p>For example:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
	<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
	<span class="n">allproducts</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">x</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">y</span><span class="p">]</span></code></pre>
</figure>
<p>At the end of this piece of code,<span> </span><code class="highlighter-rouge">allproducts</code><span> </span>will contain the list<span> </span><code class="highlighter-rouge">[5, 10, 15, 10, 20, 30, 15, 30, 45]</code>. So you can put multiple for loops inside the comprehension. But you can also add more complicated conditionals:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
	<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
	<span class="n">customlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">x</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">y</span> <span class="k">if</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="o">%</span><span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">]</span></code></pre>
</figure>
<p>Now<span> </span><code class="highlighter-rouge">customlist</code><span> </span>contains<span> </span><code class="highlighter-rouge">[5, 15, 15, 45]</code><span> </span>because only the odd products are added to the list.</p>
<p>In general, the list comprehension takes the form:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="p">[</span><span class="n">EXPRESSION</span> <span class="n">FOR_LOOPS</span> <span class="n">CONDITIONALS</span><span class="p">]</span></code></pre>
</figure>
<p>as shown in the examples above.</p>
Random numbers, continued
<p>Try to use the<span> </span><a href="https://docs.python.org/3.0/library/random.html">Python random documentation</a><span> </span>to figure out how to generate a random list. As a hint look below:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="mi">5</span><span class="p">)</span></code></pre>
</figure>
<p>This line of code will leave<span> </span><code class="highlighter-rouge">a</code><span> </span>containing a list of 5 random numbers from 0 to 99.</p>
列表重疊理解<br/><span></span><span><span>練習10（和</span></span><a href="https://www.practicepython.org/solution/2014/04/16/10-list-overlap-comprehensions-solutions.html"><span><span>解決方案</span></span></a><span><span>）</span></span>
<p><span><span>本週的練習將重溫舊的練習（請參閱</span></span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html"><span><span>練習5</span></span></a><span><span>），只是需要以其他方式解決。</span></span></p>
<p><span><span>拿兩個列表，舉例來說，這兩個：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。</span><span>確保您的程序可以在兩個不同大小的列表上運行。</span><em><span>使用至少一個列表理解</span></em></span><s><span><span>語句在一行Python中</span></span></s><span> </span><span><span>編寫</span><span>。</span><span>（</span><em><span>提示：記住</span></em><em><span>練習7中的</span></em><em><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html"><span>列表理解</span></a></em><span>）。</span></span><em><span></span></em><span></span><em><span></span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html"><span></span></a><span></span></em><span></span></p>
<p><em><span><span>此練習的原始表述是使用一行Python編寫解決方案，但是一些讀者指出，如果不使用</span></span><code class="highlighter-rouge">set</code><span><span>我尚未在博客上討論過的s，</span><span>則不可能做到這一點</span><span>，因此您可以選擇使用原始指令，並閱讀</span></span><a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=set#set"><code class="highlighter-rouge">set</code><span><span>Python 3.3中</span></span></a><span><span>的</span><a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=set#set"><span>命令</span></a><span>，或者嘗試自己實現該</span><span>指令並</span><span>在解決方案中至少使用一個列表理解。</span></span></em></p>
<p><span><span>額外：</span></span></p>
<ul>
<li><span><span>隨機生成兩個列表進行測試</span></span></li>
</ul>
<span><span>討論區</span></span>
<p><span><span>本週的概念：</span></span></p>
<ul>
<li><span><span>清單理解</span></span></li>
<li><span><span>隨機數，續</span></span></li>
</ul>
<span><span>清單理解</span></span>
<p><span><span>我們已經在</span></span><a href="http://practicepython.blogspot.com/2014/03/exercise-7-list-comprehensions.html"><span><span>練習7中</span></span></a><span><span>討論了列表理解</span><span>，但是可以使它們複雜得多。</span></span></p>
<p><span><span>例如：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
	<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
	<span class="n">allproducts</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">x</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">y</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>在這段代碼的最後，</span></span><code class="highlighter-rouge">allproducts</code><span><span>將包含list<span> </span></span></span><code class="highlighter-rouge">[5, 10, 15, 10, 20, 30, 15, 30, 45]</code><span><span>。</span><span>因此，您可以在理解中放入多個for循環。</span><span>但是您還可以添加更複雜的條件：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
	<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
	<span class="n">customlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">x</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">y</span> <span class="k">if</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="o">%</span><span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>現在</span></span><code class="highlighter-rouge">customlist</code><span><span>包含，</span></span><code class="highlighter-rouge">[5, 15, 15, 45]</code><span><span>因為僅將奇數產品添加到列表中。</span></span></p>
<p><span><span>通常，列表理解採用以下形式：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="p">[</span><span class="n">EXPRESSION</span> <span class="n">FOR_LOOPS</span> <span class="n">CONDITIONALS</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>如以上示例所示。</span></span></p>
<span><span>隨機數，續</span></span>
<p><span><span>嘗試使用</span></span><a href="https://docs.python.org/3.0/library/random.html"><span><span>Python隨機文檔</span></span></a><span><span>來弄清楚如何生成隨機列表。</span><span>提示如下：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="mi">5</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>這行代碼將</span></span><code class="highlighter-rouge">a</code><span><span>包含從0到99的5個隨機數的列表。</span></span></p>
<h2><span><span>P11</span></span></h2>
check primality functions<br/>Exercise 11 (and<span> </span><a href="https://www.practicepython.org/solution/2014/04/16/11-check-primality-functions-solutions.html">Solution</a>)
<p>Ask the user for a number and determine whether the number is prime or not. (For those who have forgotten, a prime number is a number that has no divisors.). You can (and should!) use your answer to<span> </span><a href="https://www.practicepython.org/exercise/2014/02/26/04-divisors.html">Exercise 4</a><span> </span>to help you. Take this opportunity to practice using functions, described below.</p>
Discussion
<p>Concepts for this week:</p>
<ul>
<li>Functions</li>
<li>Reusable functions</li>
<li>Default arguments</li>
</ul>
Functions
<p>One of the tools programming gives us is the ability to break down problems into easier (or perhaps previously solved) or reusable subproblems. It is good practice to have a function have a single purpose, and the name of that function should hint at it’s purpose in some way.</p>
<p>Most programming languages have this idea of a function, subroutine, or subprogram. In Python, a function is a programming construct that allows exactly that.</p>
<p>Let’s look at a simple example:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">():</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Give me a number: "</span><span class="p">))</span></code></pre>
</figure>
<p>In this small example, we used the same code that asks a user for input as a tabbed line underneath this<span> </span><code class="highlighter-rouge">def</code><span> </span>statement. The<span> </span><code class="highlighter-rouge">def</code><span> </span>means that everything tabbed underneath is a function. The name<span> </span><code class="highlighter-rouge">get_integer()</code><span> </span>is just a name that I (the programmer) made up. If I just include this code inside a Python file and run it, nothing will happen - all I have done so far is wrapped my code inside of a function; I never told my program to actually RUN my function.</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">():</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Give me a number: "</span><span class="p">))</span>

  <span class="n">age</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">()</span>
  <span class="n">school_year</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"You are over the age of 15"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"You are in grade "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">school_year</span><span class="p">))</span></code></pre>
</figure>
<p>What I have done here is<span> </span><em>called</em><span> </span>the function (told it to run) by writing<span> </span><code class="highlighter-rouge">age = get_integer()</code>. When this line of code runs, what happens is the program will<span> </span><em>execute</em><span> </span>(run) the function by asking me for a number, then<span> </span><em>returning</em><span> </span>it (giving it back to me) by saving it inside the variable<span> </span><code class="highlighter-rouge">age</code>. Now when I want to ask the user for another number (this time representing the school year), I do the same thing with the variable<span> </span><code class="highlighter-rouge">school_year</code>.</p>
Reusable functions
<p>This is all well and good, but I can make my function do much more for me. Right now, my function will always ask the user for a number by printing the string<span> </span><code class="highlighter-rouge">"Give me a number: "</code>. What if I want to print a different string every time I ask the user for a number, but otherwise use the same idea for the function? In other words, I want a variable parameter in my function that changes every time I call the function based on something I (the programmer) want to be different.</p>
<p>I can do this by<span> </span><em>passing</em><span> </span>(giving) my function a variable. Like this:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span></code></pre>
</figure>
<p>Now what I can do when I call the function is something like this:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span>

  <span class="n">age</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">(</span><span class="s">"Tell me your age: "</span><span class="p">)</span>
  <span class="n">school_year</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">(</span><span class="s">"What grade are you in? "</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"You are over the age of 15"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"You are in grade "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">school_year</span><span class="p">))</span></code></pre>
</figure>
<p>Now it is easier for a user to use the program, because the help text is different.</p>
<p>These variables you pass to functions are called<span> </span><em>variables</em>,<span> </span><em>parameters</em>, or<span> </span><em>arguments</em>.</p>
Default arguments
<p>In the example above, once I have added an<span> </span><em>argument</em><span> </span>to my function, I always have to give an argument when I call the function. I can’t forget to give the<span> </span><code class="highlighter-rouge">get_integer()</code><span> </span>function from above a string to print to the screen. In some cases, I want there to be a “default” behavior for my function that happens when I create an argument for it but don’t give it any.</p>
<p>In the example above, if I don’t give a custom string (which may be 95% of the time I use this function), I just want the<span> </span><code class="highlighter-rouge">input()</code><span> </span>line to say<span> </span><code class="highlighter-rouge">"Give me a number: "</code><span> </span>and I want to save myself the trouble of writing this every single time I call the function. So what I can do is give my function<span> </span><em>default arguments</em>. Like so:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="o">=</span><span class="s">"Give me a number: "</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span></code></pre>
</figure>
<p>What happens now is I can use the function in two ways: by giving it an argument and by NOT giving it an argument.</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="o">=</span><span class="s">"Give me a number: "</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span>

  <span class="n">age</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">(</span><span class="s">"Tell me your age: "</span><span class="p">)</span>
  <span class="n">school_year</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"You are over the age of 15"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"You are in grade "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">school_year</span><span class="p">))</span></code></pre>
</figure>
<p>The first time I call the function, it will print<span> </span><code class="highlighter-rouge">"Tell me your age: "</code>, but the second time, it will print<span> </span><code class="highlighter-rouge">"Give me a number: "</code>, because I did not give it a string and it will execute the default behavior.</p>
Recap
<p>What a function does is wrap a piece of code that we want to reuse, labels it, and allows us to use it again relatively easily. You can add variables to the functions to make your code even MORE reusable, and you can add default arguments to these variables.</p>
<p>Functions are a bit strange to deal with at first, but once you master them, they will be your savior in programming. Besides, the whole point of learning programming is abstraction, problem solving, breaking down problems, and that’s exactly what functions are all about.</p>
檢查基本功能</div>
<div class="activitywrap purpose learnbydoing flash"><span></span><span><span>練習11（和</span></span><a href="https://www.practicepython.org/solution/2014/04/16/11-check-primality-functions-solutions.html"><span><span>解決方案</span></span></a><span><span>）</span></span>
<p><span><span>向用戶詢問一個數字，並確定該數字是否為質數。</span><span>（對於那些忘記的人，質數是沒有除數的數。）</span><span>您可以（並且應該！）使用</span></span><a href="https://www.practicepython.org/exercise/2014/02/26/04-divisors.html"><span><span>練習4</span></span></a><span><span>的答案</span><span>來幫助您。</span><span>藉此機會練習使用如下所述的功能。</span></span></p>
<span><span>討論區</span></span>
<p><span><span>本週的概念：</span></span></p>
<ul>
<li><span><span>職能</span></span></li>
<li><span><span>可重用功能</span></span></li>
<li><span><span>默認參數</span></span></li>
<li>職能</li>
</ul>
<p><span><span>編程提供給我們的工具之一是能夠將問題分解為更簡單（或可能先前解決）或可重用的子問題。</span><span>優良作法是使一個函數具有單一目的，並且該函數的名稱應以某種方式暗示其目的。</span></span></p>
<p><span><span>大多數編程語言都具有函數，子例程或子程序的概念。</span><span>在Python中，函數是一種允許這樣做的編程構造。</span></span></p>
<p><span><span>讓我們看一個簡單的例子：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">():</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Give me a number: "</span><span class="p">))</span></code></pre>
</figure>
<p><span><span>在這個小示例中，我們使用了相同的代碼來要求用戶輸入此</span></span><code class="highlighter-rouge">def</code><span><span>語句</span><span>下方的選項卡行</span><span>。</span><span>的</span></span><code class="highlighter-rouge">def</code><span><span>手段，一切選項卡式下面是一個函數。</span><span>這個名字</span></span><code class="highlighter-rouge">get_integer()</code><span><span>只是我（程序員）組成的名字。</span><span>如果我只是將此代碼包含在Python文件中並運行它，則將不會發生任何事情-到目前為止，我所做的一切都將我的代碼包裝在一個函數中；</span><span>我從未告訴過我的程序實際運行我的功能。</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">():</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Give me a number: "</span><span class="p">))</span><span></span>
<span></span>
  <span class="n">age</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">()</span>
  <span class="n">school_year</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"You are over the age of 15"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"You are in grade "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">school_year</span><span class="p">))</span></code></pre>
</figure>
<p><span><span>我在這裡所做的事情</span><span>通過編寫</span></span><em><span><span>稱為</span></span></em><span><span>函數（告訴它運行）</span></span><code class="highlighter-rouge">age = get_integer()</code><span><span>。</span><span>當這行代碼運行時，程序將</span><span>通過詢問我一個數字</span><span>來</span></span><em><span><span>執行</span></span></em><span><span>（運行）該函數，然後</span></span><em><span><span>將</span></span></em><span><span>其保存在變量中以將其</span><em><span>返回</span></em><span>（返還給我）</span></span><code class="highlighter-rouge">age</code><span><span>。</span><span>現在，當我想問用戶另一個數字（這次代表學年）時，我對變量做了同樣的事情</span></span><code class="highlighter-rouge">school_year</code><span><span>。</span></span></p>
<span><span>可重用功能</span></span>
<p><span><span>這一切都很好，但是我可以讓我的功能為我做更多的事情。</span><span>現在，我的函數將始終通過打印字符串向用戶詢問一個數字</span></span><code class="highlighter-rouge">"Give me a number: "</code><span><span>。</span><span>如果我想每次問用戶一個數字時都想打印一個不同的字符串，但對於該函數使用相同的想法怎麼辦？</span><span>換句話說，我希望函數中的變量參數在每次調用函數時都根據我（程序員）希望與眾不同的事物而改變。</span></span></p>
<p><span><span>我可以通過</span></span><em><span><span>傳遞</span></span></em><span><span>（給我的）函數一個變量</span><span>來做到這一點</span><span>。</span><span>像這樣：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span></code></pre>
</figure>
<p><span><span>現在，我在調用該函數時可以執行的操作如下：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span><span></span>
<span></span>
  <span class="n">age</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">(</span><span class="s">"Tell me your age: "</span><span class="p">)</span>
  <span class="n">school_year</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">(</span><span class="s">"What grade are you in? "</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"You are over the age of 15"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"You are in grade "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">school_year</span><span class="p">))</span></code></pre>
</figure>
<p><span><span>現在，由於幫助文本不同，因此使用戶更容易使用該程序。</span></span></p>
<p><span><span>傳遞給函數的這些變量稱為</span></span><em><span><span>變量</span></span></em><span><span>，</span></span><em><span><span>參數</span></span></em><span><span>或</span></span><em><span><span>參數</span></span></em><span><span>。</span></span></p>
<span><span>默認參數</span></span>
<p><span><span>在上面的示例中，在</span><span>向函數</span><span>添加</span></span><em><span><span>參數後</span></span></em><span><span>，在調用函數時始終必須提供參數。</span><span>我不能忘記</span></span><code class="highlighter-rouge">get_integer()</code><span><span>從字符串上方</span><span>給</span><span>函數打印到屏幕上。</span><span>在某些情況下，我希望函數有一種“默認”行為，這種行為會在為它創建參數但不給出任何參數時發生。</span></span></p>
<p><span><span>在上面的示例中，如果我不提供自定義字符串（可能占我使用此函數的時間的95％），我只想讓</span></span><code class="highlighter-rouge">input()</code><span><span>行說出來，</span></span><code class="highlighter-rouge">"Give me a number: "</code><span><span>並且省去了每次編寫此</span><span>字符串</span><span>的麻煩我稱這個功能。</span><span>所以我能做的就是給我的函數</span></span><em><span><span>默認參數</span></span></em><span><span>。</span><span>像這樣：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="o">=</span><span class="s">"Give me a number: "</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span></code></pre>
</figure>
<p><span><span>現在發生的事情是我可以通過兩種方式使用該函數：通過給它一個參數和不給它一個參數。</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="o">=</span><span class="s">"Give me a number: "</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span><span></span>
<span></span>
  <span class="n">age</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">(</span><span class="s">"Tell me your age: "</span><span class="p">)</span>
  <span class="n">school_year</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"You are over the age of 15"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"You are in grade "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">school_year</span><span class="p">))</span></code></pre>
</figure>
<p><span><span>第一次調用該函數，它將打印</span></span><code class="highlighter-rouge">"Tell me your age: "</code><span><span>，但是第二次，它將打印</span></span><code class="highlighter-rouge">"Give me a number: "</code><span><span>，因為我沒有給它一個字符串，它將執行默認行為。</span></span></p>
<h3 id="recap"><span><span>回顧</span></span></h3>
<p><span><span>函數的作用是包裝我們要重用的一段代碼，對其進行標記，並允許我們相對容易地再次使用它。</span><span>您可以將變量添加到函數中，以使代碼更加可重用，並且可以將默認參數添加到這些變量中。</span></span></p>
<p><span><span>一開始處理函數有點奇怪，但是一旦掌握了這些函數，它們將成為編程的救星。</span><span>此外，學習編程的重點是抽象，解決問題，分解問題，而這正是功能的全部所在。</span></span></p>
<h2><span><span>P12</span></span></h2>
<span><span>List ends</span></span></div>
<div class="activitywrap purpose learnbydoing flash">Exercise 12 (and<span> </span><a href="https://www.practicepython.org/solution/2014/05/15/12-list-ends-solutions.html">Solution</a>)
<p>Write a program that takes a list of numbers (for example,<span> </span><code class="highlighter-rouge">a = [5, 10, 15, 20, 25]</code>) and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function.</p>
Concepts to practice
<ul>
<li>Lists and properties of lists</li>
<li>List comprehensions (maybe)</li>
<li>Functions</li>
</ul>
<span><span></span></span></div>
<h4 class="activitywrap purpose learnbydoing flash"><span><span>清單結尾</span></span></h4>
<div class="activitywrap purpose learnbydoing flash"><span><span>練習12（和</span></span><a href="https://www.practicepython.org/solution/2014/05/15/12-list-ends-solutions.html"><span><span>解決方案</span></span></a><span><span>）</span></span></div>
<div class="activitywrap purpose learnbydoing flash">
<p><span><span>編寫一個程序，該程序接受一個數字列表（例如</span></span><code class="highlighter-rouge">a = [5, 10, 15, 20, 25]</code><span><span>），並製作一個僅包含給定列表的第一個和最後一個元素的新列表。</span><span>為了練習，請在函數內編寫此代碼。</span></span></p>
<span><span>練習概念</span></span>
<ul>
<li><span><span>列表和列表屬性</span></span></li>
<li><span><span>列表理解（也許）</span></span></li>
<li><span><span>職能</span></span><span><span></span></span></li>
<li>List Overlap Comprehensions Solutions<span></span> <br/><i></i>P10 AII solutions <a href="https://www.practicepython.org/exercise/2014/04/10/10-list-overlap-comprehensions.html"></a> <a href="https://www.practicepython.org/exercise/2014/04/10/10-list-overlap-comprehensions.html">Exercise 10</a>
<p>This week’s exercise is going to be revisiting an old exercise (see<span> </span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html">Exercise 5</a>), except require the solution in a different way.</p>
<p>Take two lists, say for example these two:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p>and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this<span> </span><em>using at least one list comprehension</em>. (<em>Hint: Remember<span> </span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html">list comprehensions</a><span> </span>from Exercise 7</em>).</p>
<p>Extra:</p>
<ul>
<li>Randomly generate two lists to test this</li>
</ul>
Sample solution
<p>A user-submitted solution:</p>
<div class="gist" id="gist10904252">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-exercise-10">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-exercise-10-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC1">import random</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-exercise-10-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC2"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-exercise-10-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC3">a = random.sample(range(1,30), 12)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-exercise-10-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC4">b = random.sample(range(1,30), 16)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-exercise-10-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC5">result = [i for i in a if i in b]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/10904252/raw/02252b579b7b5d544890dadf356c941ad73e78d4/Exercise%2010">view raw</a><a href="https://gist.github.com/anonymous/10904252#file-exercise-10">Exercise 10</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>As a few commenters / readers of this blog have pointed out (thanks mainly to Gautam and Jeff), the exercise as posed is actually impossible to write in a single line of Python. The problem is this: the proposed reader solution (and the solution that I had in mind myself) as written above does not take into account the fact that there might be duplicates in the resulting list, where I specifically asked to not include duplicates. This means that in the simple example I gave above,<span> </span><code class="highlighter-rouge">a</code>’s first element is<span> </span><code class="highlighter-rouge">1</code><span> </span>will be added to the<span> </span><code class="highlighter-rouge">result</code><span> </span>list because it is in<span> </span><code class="highlighter-rouge">b</code>. But then it’s next element is also<span> </span><code class="highlighter-rouge">1</code>, and is also in<span> </span><code class="highlighter-rouge">b</code>, so will be added to the<span> </span><code class="highlighter-rouge">result</code><span> </span>list. So the solution as given (the comprehension<span> </span><code class="highlighter-rouge">[i for i in a if i in b]</code>) will not yield the correct result on the example solution.</p>
<p>Instead, as pointed out by Gautam and Jeff, the simplest way to achieve this solution would be to make sure that we are only looking at unique elements from<span> </span><code class="highlighter-rouge">a</code>, the first list in the comprehension. We have not discussed doing this easily in Python on this blog using the<span> </span><code class="highlighter-rouge">set</code><span> </span>built-in function, but if you know it, the solution will look like this:</p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC1"><span class="pl-k">import</span> <span class="pl-s1">random</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC2"><span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>), <span class="pl-c1">12</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC3"><span class="pl-s1">b</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>), <span class="pl-c1">16</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC4"><span class="pl-s1">result</span> <span class="pl-c1">=</span> [<span class="pl-s1">i</span> <span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-en">set</span>(<span class="pl-s1">a</span>) <span class="pl-k">if</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-s1">b</span>]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions.py">view raw</a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-py">list-overlap-comprehensions.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>But, to achieve the same results as asked in the original question while still using a list comprehension (however, definitely not using a single line of code), would be to make sure that there is no overlap in the new list after it is constructed, using the traditional<span> </span><code class="highlighter-rouge">for</code><span> </span>loop on lists:</p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-for-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-for-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC1"><span class="pl-k">import</span> <span class="pl-s1">random</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-for-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC2"><span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>), <span class="pl-c1">12</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-for-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC3"><span class="pl-s1">b</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>), <span class="pl-c1">16</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-for-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC4"><span class="pl-s1">result_overlap</span> <span class="pl-c1">=</span> [<span class="pl-s1">i</span> <span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-en">set</span>(<span class="pl-s1">a</span>) <span class="pl-k">if</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-s1">b</span>]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-for-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC5"><span class="pl-s1">result</span> <span class="pl-c1">=</span> []</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-list-overlap-comprehensions-for-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC6"><span class="pl-k">for</span> <span class="pl-s1">element</span> <span class="pl-c1">in</span> <span class="pl-s1">result_overlap</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-list-overlap-comprehensions-for-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC7"><span class="pl-k">if</span> <span class="pl-s1">element</span> <span class="pl-c1">not</span> <span class="pl-c1">in</span> <span class="pl-s1">result</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-list-overlap-comprehensions-for-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC8"><span class="pl-s1">result</span>.<span class="pl-en">appent</span>(<span class="pl-s1">element</span>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-for.py">view raw</a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-for-py">list-overlap-comprehensions-for.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>Or, to practice list comprehensions again, this can be done with two list comprehensions:</p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-2-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-2-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC1"><span class="pl-k">import</span> <span class="pl-s1">random</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-2-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC2"><span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>), <span class="pl-c1">12</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-2-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC3"><span class="pl-s1">b</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>), <span class="pl-c1">16</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-2-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC4"><span class="pl-s1">result_overlaps</span> <span class="pl-c1">=</span> [<span class="pl-s1">i</span> <span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-en">set</span>(<span class="pl-s1">a</span>) <span class="pl-k">if</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-s1">b</span>]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-2-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC5"><span class="pl-s1">result</span> <span class="pl-c1">=</span> [<span class="pl-s1">i</span> <span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-s1">result_overlaps</span> <span class="pl-k">if</span> <span class="pl-s1">result_overlaps</span>.<span class="pl-en">count</span>(<span class="pl-s1">i</span>) <span class="pl-c1">==</span> <span class="pl-c1">1</span>]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-2.py">view raw</a></div>
<div class="gist-meta">
<p><span>本週的練習將重溫舊的練習（請參閱</span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html"><span>練習5</span></a><span>），只是需要以其他方式解決。</span></p>
<p><span><span>拿兩個列表，舉例來說，這兩個：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。</span><span>確保您的程序可以在兩個不同大小的列表上運行。</span></span><em><span><span>至少使用一個列表理解來</span></span></em><span><span>寫這個</span><span>。</span><span>（</span></span><em><span><span>提示：記住</span><span>練習7中的</span></span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html"><span><span>列表理解</span></span></a><span></span></em><span><span>）。</span></span></p>
<p><span><span>額外：</span></span></p>
<ul>
<li><span><span>隨機生成兩個列表進行測試</span></span></li>
</ul>
<span><span>樣品溶液</span></span>
<p><span><span>用戶提交的解決方案：</span></span></p>
<div class="gist" id="gist10904252">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-exercise-10">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-exercise-10-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC1"><span><span>隨機導入</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-exercise-10-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC2"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-exercise-10-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC3"><span><span>一個= random.sample（range（1,30），12）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-exercise-10-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC4"><span><span>b = random.sample（範圍（1,30），16）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-exercise-10-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC5"><span><span>結果= [如果b中有i，則a中的i代表i]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/10904252/raw/02252b579b7b5d544890dadf356c941ad73e78d4/Exercise%2010"><span><span>查看原始</span></span></a><a href="https://gist.github.com/anonymous/10904252#file-exercise-10"><span><span>練習10</span></span></a><span><span><span> </span>由</span></span><a href="https://github.com/"><span><span>GitHub託管</span></span></a></div>
</div>
</div>
<p><span><span>正如該博客的一些評論者/讀者所指出的（主要感謝Gautam和Jeff），所提出的練習實際上不可能用Python編寫。</span><span>問題是這樣的：上面寫的建議的閱讀器解決方案（以及我自己想到的解決方案）沒有考慮到結果列表中可能存在重複項的事實，我特別要求不要包含重複項。</span><span>這意味著在我上面給出的簡單示例中，</span></span><code class="highlighter-rouge">a</code><span><span>第一個元素</span></span><code class="highlighter-rouge">1</code><span><span>將被添加到</span></span><code class="highlighter-rouge">result</code><span><span>列表中，因為它在中</span></span><code class="highlighter-rouge">b</code><span><span>。</span><span>但隨後它的下一個元素也是</span></span><code class="highlighter-rouge">1</code><span><span>，並且也在</span></span><code class="highlighter-rouge">b</code><span><span>，因此將被添加到</span></span><code class="highlighter-rouge">result</code><span><span>列表中。</span><span>因此，給定的解決方案（comprehension<span> </span></span></span><code class="highlighter-rouge">[i for i in a if i in b]</code><span><span>）將無法在示例解決方案上產生正確的結果。</span></span></p>
<p><span><span>相反，正如Gautam和Jeff所指出的那樣，實現此解決方案的最簡單方法是確保僅查看來自</span></span><code class="highlighter-rouge">a</code><span><span>理解中第一個列表的</span><span>唯一元素</span><span>。</span><span>我們沒有在此博客上使用</span></span><code class="highlighter-rouge">set</code><span><span>內置函數</span><span>討論在Python中輕鬆實現此操作的</span><span>方法，但是如果您知道，解決方案將如下所示：</span></span></p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC1"><span class="pl-k"><span></span></span> <span><span class="pl-s1"><span>隨機</span></span><span class="pl-k"><span>導入</span></span></span><span class="pl-s1"><span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC2"><span class="pl-s1"><span><span>a </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-s1"><span><span>隨機的</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>12</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC3"><span class="pl-s1"><span><span>b </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-s1"><span><span>隨機</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>16</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC4"><span class="pl-s1"><span><span>導致</span></span></span> <span class="pl-c1"><span><span>=</span></span></span><span><span> [</span></span><span class="pl-s1"><span><span>我</span></span></span> <span class="pl-k"><span><span>為</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-en"><span><span>集</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>一</span></span></span><span><span>）</span></span><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-s1"><span><span>b</span></span></span><span><span> ]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-py"><span><span>list-overlap-comprehensions.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>但是，要在仍然使用列表理解的情況下達到與原始問題相同的結果（但是，絕對不要使用一行代碼），將確保新列表在構建後沒有重疊，使用</span></span><code class="highlighter-rouge">for</code><span><span>列表上</span><span>的傳統</span><span>循環：</span></span></p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-for-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-for-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC1"><span class="pl-k"><span></span></span> <span><span class="pl-s1"><span>隨機</span></span><span class="pl-k"><span>導入</span></span></span><span class="pl-s1"><span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-for-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC2"><span class="pl-s1"><span><span>a </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-s1"><span><span>隨機的</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>12</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-for-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC3"><span class="pl-s1"><span><span>b </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-s1"><span><span>隨機</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>16</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-for-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC4"><span class="pl-s1"><span><span>result_overlap </span></span></span> <span class="pl-c1"><span><span>=</span></span></span><span><span> [</span></span><span class="pl-s1"><span><span>我</span></span></span> <span class="pl-k"><span><span>為</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-en"><span><span>集</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>一</span></span></span><span><span>）</span></span><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-s1"><span><span>b</span></span></span><span><span> ]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-for-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC5"><span class="pl-s1"><span><span>結果</span></span></span> <span class="pl-c1"><span><span>=</span></span></span><span><span> []</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-list-overlap-comprehensions-for-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC6"><span class="pl-k"><span><span>對於</span></span></span> <span class="pl-s1"><span><span>元件</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-s1"><span><span>result_overlap</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-list-overlap-comprehensions-for-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC7"><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>要素</span></span></span> <span class="pl-c1"><span><span>不能</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-s1"><span><span>結果</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-list-overlap-comprehensions-for-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC8"><span class="pl-s1"><span><span>結果</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>出現</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>元素</span></span></span><span><span>）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-for.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-for-py"><span><span>list-overlap-comprehensions-for.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>或者，要再次練習列表推導，可以使用兩個列表推導來完成：</span></span></p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-2-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-2-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC1"><span class="pl-k"><span></span></span> <span><span class="pl-s1"><span>隨機</span></span><span class="pl-k"><span>導入</span></span></span><span class="pl-s1"><span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-2-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC2"><span class="pl-s1"><span><span>a </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-s1"><span><span>隨機的</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>12</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-2-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC3"><span class="pl-s1"><span><span>b </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-s1"><span><span>隨機</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>16</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-2-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC4"><span class="pl-s1"><span><span>result_overlaps </span></span></span> <span class="pl-c1"><span><span>=</span></span></span><span><span> [</span></span><span class="pl-s1"><span><span>我</span></span></span> <span class="pl-k"><span><span>為</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-en"><span><span>集</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>一</span></span></span><span><span>）</span></span><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-s1"><span><span>b</span></span></span><span><span> ]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-2-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC5"><span class="pl-s1"><span><span>導致</span></span></span> <span class="pl-c1"><span><span>=</span></span></span><span><span> [</span></span><span class="pl-s1"><span><span>我</span></span></span> <span class="pl-k"><span><span>為</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-s1"><span><span>result_overlaps</span></span></span> <span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>result_overlaps</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>數</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>i</span></span></span><span><span>）</span></span><span class="pl-c1"><span><span>== </span></span></span> <span class="pl-c1"><span><span>1</span></span></span><span><span> ]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-2.py"><span><span>查看原始</span></span></a></div>
<h2 class="gist-meta"><span><span>P10 All solutions</span></span></h2>
<div class="gist-meta">List Overlap Comprehensions Solutions
<div><i></i></div>
<a href="https://www.practicepython.org/exercise/2014/04/10/10-list-overlap-comprehensions.html">Exercise 10</a>
<p>This week’s exercise is going to be revisiting an old exercise (see<span> </span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html">Exercise 5</a>), except require the solution in a different way.</p>
<p>Take two lists, say for example these two:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p>and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this<span> </span><em>using at least one list comprehension</em>. (<em>Hint: Remember<span> </span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html">list comprehensions</a><span> </span>from Exercise 7</em>).</p>
<p>Extra:</p>
<ul>
<li>Randomly generate two lists to test this</li>
</ul>
Sample solution
<p>A user-submitted solution:</p>
<div class="gist" id="gist10904252">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-exercise-10">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-exercise-10-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC1">import random</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-exercise-10-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC2"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-exercise-10-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC3">a = random.sample(range(1,30), 12)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-exercise-10-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC4">b = random.sample(range(1,30), 16)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-exercise-10-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC5">result = [i for i in a if i in b]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/10904252/raw/02252b579b7b5d544890dadf356c941ad73e78d4/Exercise%2010">view raw</a><a href="https://gist.github.com/anonymous/10904252#file-exercise-10">Exercise 10</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>As a few commenters / readers of this blog have pointed out (thanks mainly to Gautam and Jeff), the exercise as posed is actually impossible to write in a single line of Python. The problem is this: the proposed reader solution (and the solution that I had in mind myself) as written above does not take into account the fact that there might be duplicates in the resulting list, where I specifically asked to not include duplicates. This means that in the simple example I gave above,<span> </span><code class="highlighter-rouge">a</code>’s first element is<span> </span><code class="highlighter-rouge">1</code><span> </span>will be added to the<span> </span><code class="highlighter-rouge">result</code><span> </span>list because it is in<span> </span><code class="highlighter-rouge">b</code>. But then it’s next element is also<span> </span><code class="highlighter-rouge">1</code>, and is also in<span> </span><code class="highlighter-rouge">b</code>, so will be added to the<span> </span><code class="highlighter-rouge">result</code><span> </span>list. So the solution as given (the comprehension<span> </span><code class="highlighter-rouge">[i for i in a if i in b]</code>) will not yield the correct result on the example solution.</p>
<p>Instead, as pointed out by Gautam and Jeff, the simplest way to achieve this solution would be to make sure that we are only looking at unique elements from<span> </span><code class="highlighter-rouge">a</code>, the first list in the comprehension. We have not discussed doing this easily in Python on this blog using the<span> </span><code class="highlighter-rouge">set</code><span> </span>built-in function, but if you know it, the solution will look like this:</p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC1"><span class="pl-k">import</span> <span class="pl-s1">random</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC2"><span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>), <span class="pl-c1">12</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC3"><span class="pl-s1">b</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>), <span class="pl-c1">16</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC4"><span class="pl-s1">result</span> <span class="pl-c1">=</span> [<span class="pl-s1">i</span> <span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-en">set</span>(<span class="pl-s1">a</span>) <span class="pl-k">if</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-s1">b</span>]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions.py">view raw</a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-py">list-overlap-comprehensions.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>But, to achieve the same results as asked in the original question while still using a list comprehension (however, definitely not using a single line of code), would be to make sure that there is no overlap in the new list after it is constructed, using the traditional<span> </span><code class="highlighter-rouge">for</code><span> </span>loop on lists:</p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-for-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-for-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC1"><span class="pl-k">import</span> <span class="pl-s1">random</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-for-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC2"><span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>), <span class="pl-c1">12</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-for-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC3"><span class="pl-s1">b</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>), <span class="pl-c1">16</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-for-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC4"><span class="pl-s1">result_overlap</span> <span class="pl-c1">=</span> [<span class="pl-s1">i</span> <span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-en">set</span>(<span class="pl-s1">a</span>) <span class="pl-k">if</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-s1">b</span>]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-for-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC5"><span class="pl-s1">result</span> <span class="pl-c1">=</span> []</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-list-overlap-comprehensions-for-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC6"><span class="pl-k">for</span> <span class="pl-s1">element</span> <span class="pl-c1">in</span> <span class="pl-s1">result_overlap</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-list-overlap-comprehensions-for-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC7"><span class="pl-k">if</span> <span class="pl-s1">element</span> <span class="pl-c1">not</span> <span class="pl-c1">in</span> <span class="pl-s1">result</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-list-overlap-comprehensions-for-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC8"><span class="pl-s1">result</span>.<span class="pl-en">appent</span>(<span class="pl-s1">element</span>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-for.py">view raw</a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-for-py">list-overlap-comprehensions-for.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>Or, to practice list comprehensions again, this can be done with two list comprehensions:</p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-2-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-2-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC1"><span class="pl-k">import</span> <span class="pl-s1">random</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-2-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC2"><span class="pl-s1">a</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>), <span class="pl-c1">12</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-2-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC3"><span class="pl-s1">b</span> <span class="pl-c1">=</span> <span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>), <span class="pl-c1">16</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-2-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC4"><span class="pl-s1">result_overlaps</span> <span class="pl-c1">=</span> [<span class="pl-s1">i</span> <span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-en">set</span>(<span class="pl-s1">a</span>) <span class="pl-k">if</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-s1">b</span>]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-2-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC5"><span class="pl-s1">result</span> <span class="pl-c1">=</span> [<span class="pl-s1">i</span> <span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-s1">result_overlaps</span> <span class="pl-k">if</span> <span class="pl-s1">result_overlaps</span>.<span class="pl-en">count</span>(<span class="pl-s1">i</span>) <span class="pl-c1">==</span> <span class="pl-c1">1</span>]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-2.py">view raw</a></div>
<div class="gist-meta"><span></span>
<div><i></i></div>
<a href="https://www.practicepython.org/exercise/2014/04/10/10-list-overlap-comprehensions.html"><span><span>練習10</span></span></a>
<p><span><span>本週的練習將重溫舊的練習（請參閱</span></span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html"><span><span>練習5</span></span></a><span><span>），只是需要以其他方式解決。</span></span></p>
<p><span><span>拿兩個列表，舉例來說，這兩個：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。</span><span>確保您的程序可以在兩個不同大小的列表上運行。</span></span><em><span><span>至少使用一個列表理解來</span></span></em><span><span>寫這個</span><span>。</span><span>（</span></span><em><span><span>提示：記住</span><span>練習7中的</span></span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html"><span><span>列表理解</span></span></a><span></span></em><span><span>）。</span></span></p>
<p><span><span>額外：</span></span></p>
<ul>
<li><span><span>隨機生成兩個列表進行測試</span></span></li>
</ul>
<span><span>樣品溶液</span></span>
<p><span><span>用戶提交的解決方案：</span></span></p>
<div class="gist" id="gist10904252">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-exercise-10">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-exercise-10-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC1"><span><span>隨機導入</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-exercise-10-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC2"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-exercise-10-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC3"><span><span>一個= random.sample（range（1,30），12）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-exercise-10-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC4"><span><span>b = random.sample（範圍（1,30），16）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-exercise-10-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC5"><span><span>結果= [如果b中有i，則a中的i代表i]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/10904252/raw/02252b579b7b5d544890dadf356c941ad73e78d4/Exercise%2010"><span><span>查看原始</span></span></a><a href="https://gist.github.com/anonymous/10904252#file-exercise-10"><span><span>練習10</span></span></a><span><span><span> </span>由</span></span><a href="https://github.com/"><span><span>GitHub託管</span></span></a></div>
</div>
</div>
<p><span><span>正如該博客的一些評論者/讀者所指出的（主要感謝Gautam和Jeff），所提出的練習實際上不可能用Python編寫。</span><span>問題是這樣的：上面寫的建議的閱讀器解決方案（以及我自己想到的解決方案）沒有考慮到結果列表中可能存在重複項的事實，我特別要求不要包含重複項。</span><span>這意味著在我上面給出的簡單示例中，</span></span><code class="highlighter-rouge">a</code><span><span>第一個元素</span></span><code class="highlighter-rouge">1</code><span><span>將被添加到</span></span><code class="highlighter-rouge">result</code><span><span>列表中，因為它在中</span></span><code class="highlighter-rouge">b</code><span><span>。</span><span>但隨後它的下一個元素也是</span></span><code class="highlighter-rouge">1</code><span><span>，並且也在</span></span><code class="highlighter-rouge">b</code><span><span>，因此將被添加到</span></span><code class="highlighter-rouge">result</code><span><span>列表中。</span><span>因此，給定的解決方案（comprehension<span> </span></span></span><code class="highlighter-rouge">[i for i in a if i in b]</code><span><span>）將無法在示例解決方案上產生正確的結果。</span></span></p>
<p><span><span>相反，正如Gautam和Jeff所指出的那樣，實現此解決方案的最簡單方法是確保僅查看來自</span></span><code class="highlighter-rouge">a</code><span><span>理解中第一個列表的</span><span>唯一元素</span><span>。</span><span>我們沒有在此博客上使用</span></span><code class="highlighter-rouge">set</code><span><span>內置函數</span><span>討論在Python中輕鬆實現此操作的</span><span>方法，但是如果您知道，解決方案將如下所示：</span></span></p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC1"><span class="pl-k"><span></span></span> <span><span class="pl-s1"><span>隨機</span></span><span class="pl-k"><span>導入</span></span></span><span class="pl-s1"><span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC2"><span class="pl-s1"><span><span>a </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-s1"><span><span>隨機的</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>12</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC3"><span class="pl-s1"><span><span>b </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-s1"><span><span>隨機</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>16</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC4"><span class="pl-s1"><span><span>導致</span></span></span> <span class="pl-c1"><span><span>=</span></span></span><span><span> [</span></span><span class="pl-s1"><span><span>我</span></span></span> <span class="pl-k"><span><span>為</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-en"><span><span>集</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>一</span></span></span><span><span>）</span></span><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-s1"><span><span>b</span></span></span><span><span> ]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-py"><span><span>list-overlap-comprehensions.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>但是，要在仍然使用列表理解的情況下達到與原始問題相同的結果（但是，絕對不要使用一行代碼），將確保新列表在構建後沒有重疊，使用</span></span><code class="highlighter-rouge">for</code><span><span>列表上</span><span>的傳統</span><span>循環：</span></span></p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-for-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-for-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC1"><span class="pl-k"><span></span></span> <span><span class="pl-s1"><span>隨機</span></span><span class="pl-k"><span>導入</span></span></span><span class="pl-s1"><span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-for-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC2"><span class="pl-s1"><span><span>a </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-s1"><span><span>隨機的</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>12</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-for-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC3"><span class="pl-s1"><span><span>b </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-s1"><span><span>隨機</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>16</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-for-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC4"><span class="pl-s1"><span><span>result_overlap </span></span></span> <span class="pl-c1"><span><span>=</span></span></span><span><span> [</span></span><span class="pl-s1"><span><span>我</span></span></span> <span class="pl-k"><span><span>為</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-en"><span><span>集</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>一</span></span></span><span><span>）</span></span><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-s1"><span><span>b</span></span></span><span><span> ]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-for-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC5"><span class="pl-s1"><span><span>結果</span></span></span> <span class="pl-c1"><span><span>=</span></span></span><span><span> []</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-list-overlap-comprehensions-for-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC6"><span class="pl-k"><span><span>對於</span></span></span> <span class="pl-s1"><span><span>元件</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-s1"><span><span>result_overlap</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-list-overlap-comprehensions-for-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC7"><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>要素</span></span></span> <span class="pl-c1"><span><span>不能</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-s1"><span><span>結果</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-list-overlap-comprehensions-for-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC8"><span class="pl-s1"><span><span>結果</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>出現</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>元素</span></span></span><span><span>）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-for.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-for-py"><span><span>list-overlap-comprehensions-for.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>或者，要再次練習列表推導，可以使用兩個列表推導來完成：</span></span></p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-2-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-2-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC1"><span class="pl-k"><span></span></span> <span><span class="pl-s1"><span>隨機</span></span><span class="pl-k"><span>導入</span></span></span><span class="pl-s1"><span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-2-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC2"><span class="pl-s1"><span><span>a </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-s1"><span><span>隨機的</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>12</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-2-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC3"><span class="pl-s1"><span><span>b </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-s1"><span><span>隨機</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>16</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-2-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC4"><span class="pl-s1"><span><span>result_overlaps </span></span></span> <span class="pl-c1"><span><span>=</span></span></span><span><span> [</span></span><span class="pl-s1"><span><span>我</span></span></span> <span class="pl-k"><span><span>為</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-en"><span><span>集</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>一</span></span></span><span><span>）</span></span><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-s1"><span><span>b</span></span></span><span><span> ]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-2-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC5"><span class="pl-s1"><span><span>導致</span></span></span> <span class="pl-c1"><span><span>=</span></span></span><span><span> [</span></span><span class="pl-s1"><span><span>我</span></span></span> <span class="pl-k"><span><span>為</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-s1"><span><span>result_overlaps</span></span></span> <span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>result_overlaps</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>數</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>i</span></span></span><span><span>）</span></span><span class="pl-c1"><span><span>== </span></span></span> <span class="pl-c1"><span><span>1</span></span></span><span><span> ]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-2.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-2-py"><span><span>list-overlap-comprehensions-2.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<div id="share"><span><span>分享樂趣！</span></span></div>
</div>
</div>
</div>
</div>
<h2 class="gist-meta"><span><span>P11 All solutions</span></span></h2>
Check Primality Functions Solutions
<div><i></i></div>
<a href="https://www.practicepython.org/exercise/2014/04/16/11-check-primality-functions.html">Exercise 11</a>
<p>Ask the user for a number and determine whether the number is prime or not. (For those who have forgotten, a prime number is a number that has no divisors.). You can (and should!) use your answer to<span> </span><a href="https://www.practicepython.org/exercise/2014/02/26/04-divisors.html">Exercise 4</a><span> </span>to help you.</p>
Sample solution
<p>There are many ways of solving this problem, so here are a sample solutions:</p>
<p>This one is a different breakdown of functions to solve the problem. The strings between three<span> </span><code class="highlighter-rouge">'''</code><span> </span>marks are comments in the code that describe what each function does.</p>
<div class="gist" id="gist11196563">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-prime_check-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-prime_check-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC1"><span class="pl-k">def</span> <span class="pl-en">get_number</span>(<span class="pl-s1">prompt</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-prime_check-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC2"><span class="pl-s">'''Returns integer value for input. Prompt is displayed text'''</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-prime_check-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC3"><span class="pl-k">return</span> <span class="pl-en">int</span>(<span class="pl-en">input</span>(<span class="pl-s1">prompt</span>))</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-prime_check-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC4"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-prime_check-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC5"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-prime_check-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC6"><span class="pl-k">def</span> <span class="pl-en">is_prime</span>(<span class="pl-s1">number</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-prime_check-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC7"><span class="pl-s">'''Returns True for prime numbers, False otherwise'''</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-prime_check-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC8"><span class="pl-c">#Edge Cases</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-prime_check-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC9"><span class="pl-k">if</span> <span class="pl-s1">number</span> <span class="pl-c1">==</span> <span class="pl-c1">1</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-prime_check-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC10"><span class="pl-s1">prime</span> <span class="pl-c1">=</span> <span class="pl-c1">False</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-prime_check-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC11"><span class="pl-k">elif</span> <span class="pl-s1">number</span> <span class="pl-c1">==</span> <span class="pl-c1">2</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-prime_check-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC12"><span class="pl-s1">prime</span> <span class="pl-c1">=</span> <span class="pl-c1">True</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-prime_check-py-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC13"><span class="pl-c">#All other primes </span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="14" id="file-prime_check-py-L14"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC14"><span class="pl-k">else</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="15" id="file-prime_check-py-L15"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC15"><span class="pl-s1">prime</span> <span class="pl-c1">=</span> <span class="pl-c1">True</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="16" id="file-prime_check-py-L16"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC16"><span class="pl-k">for</span> <span class="pl-s1">check_number</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-c1">2</span>, (<span class="pl-s1">number</span> <span class="pl-c1">/</span> <span class="pl-c1">2</span>)<span class="pl-c1">+</span><span class="pl-c1">1</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="17" id="file-prime_check-py-L17"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC17"><span class="pl-k">if</span> <span class="pl-s1">number</span> <span class="pl-c1">%</span> <span class="pl-s1">check_number</span> <span class="pl-c1">==</span> <span class="pl-c1">0</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="18" id="file-prime_check-py-L18"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC18"><span class="pl-s1">prime</span> <span class="pl-c1">=</span> <span class="pl-c1">False</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="19" id="file-prime_check-py-L19"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC19"><span class="pl-k">break</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="20" id="file-prime_check-py-L20"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC20"><span class="pl-k">return</span> <span class="pl-s1">prime</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="21" id="file-prime_check-py-L21"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC21"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="22" id="file-prime_check-py-L22"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC22"><span class="pl-k">def</span> <span class="pl-en">print_prime</span>(<span class="pl-s1">number</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="23" id="file-prime_check-py-L23"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC23"><span class="pl-s1">prime</span> <span class="pl-c1">=</span> <span class="pl-en">is_prime</span>(<span class="pl-s1">number</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="24" id="file-prime_check-py-L24"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC24"><span class="pl-k">if</span> <span class="pl-s1">prime</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="25" id="file-prime_check-py-L25"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC25"><span class="pl-s1">descriptor</span> <span class="pl-c1">=</span> <span class="pl-s">""</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="26" id="file-prime_check-py-L26"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC26"><span class="pl-k">else</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="27" id="file-prime_check-py-L27"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC27"><span class="pl-s1">descriptor</span> <span class="pl-c1">=</span> <span class="pl-s">"not "</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="28" id="file-prime_check-py-L28"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC28"><span class="pl-en">print</span>(<span class="pl-s1">number</span>,<span class="pl-s">" is "</span>, <span class="pl-s1">descriptor</span>, <span class="pl-s">"prime."</span>, <span class="pl-s1">sep</span> <span class="pl-c1">=</span> <span class="pl-s">""</span>, <span class="pl-s1">end</span> <span class="pl-c1">=</span> <span class="pl-s">"<span class="pl-cce">\n</span><span class="pl-cce">\n</span>"</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="29" id="file-prime_check-py-L29"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC29"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="30" id="file-prime_check-py-L30"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC30"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="31" id="file-prime_check-py-L31"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC31"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="32" id="file-prime_check-py-L32"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC32"><span class="pl-c">#never ending loop</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="33" id="file-prime_check-py-L33"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC33"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="34" id="file-prime_check-py-L34"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC34"><span class="pl-k">while</span> <span class="pl-c1">1</span> <span class="pl-c1">==</span> <span class="pl-c1">1</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="35" id="file-prime_check-py-L35"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC35"><span class="pl-en">print_prime</span>(<span class="pl-en">get_number</span>(<span class="pl-s">"Enter a number to check. Ctl-C to exit."</span>))</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="36" id="file-prime_check-py-L36"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC36"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="37" id="file-prime_check-py-L37"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC37"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="38" id="file-prime_check-py-L38"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC38"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="39" id="file-prime_check-py-L39"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC39"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/JamieMacIver/11196563/raw/a16d5762b4089d33e34650a22adcdf3426fffe7e/prime_check.py">view raw</a><a href="https://gist.github.com/JamieMacIver/11196563#file-prime_check-py">prime_check.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>And here is a solution without using functions. It is also a correct solution that accomplishes the given task, just without the use of functions.</p>
<div class="gist" id="gist11074742">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-checkprimality-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-checkprimality-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC1"><span class="pl-k">import</span> <span class="pl-s1">sys</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-checkprimality-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC2"><span class="pl-s1">number</span> <span class="pl-c1">=</span> <span class="pl-en">input</span>(<span class="pl-s">"Please enter a number"</span> <span class="pl-c1">+</span> <span class="pl-s">"<span class="pl-cce">\n</span>"</span> <span class="pl-c1">+</span> <span class="pl-s">"&gt;&gt;&gt;"</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-checkprimality-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC3"><span class="pl-s1">number</span> <span class="pl-c1">=</span> <span class="pl-en">int</span>(<span class="pl-s1">number</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-checkprimality-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC4"><span class="pl-s1">prime</span> <span class="pl-c1">=</span> <span class="pl-c1">False</span> <span class="pl-c">#initiate boolean for true false, default false</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-checkprimality-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC5"><span class="pl-k">if</span> <span class="pl-s1">number</span> <span class="pl-c1">&gt;</span> <span class="pl-c1">0</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-checkprimality-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC6"><span class="pl-k">for</span> <span class="pl-s1">x</span> <span class="pl-c1">in</span> <span class="pl-en">range</span> (<span class="pl-c1">2</span>, <span class="pl-s1">number</span> <span class="pl-c1">-</span> <span class="pl-c1">1</span>): <span class="pl-c">#this range excludes number and 1, both of which number is divisible by</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-checkprimality-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC7"><span class="pl-k">if</span> <span class="pl-s1">number</span> <span class="pl-c1">%</span> <span class="pl-s1">x</span> <span class="pl-c1">!=</span> <span class="pl-c1">0</span>: <span class="pl-c">#If number isn't evenly divisible by x, start over with the next one</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-checkprimality-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC8"><span class="pl-k">continue</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-checkprimality-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC9"><span class="pl-k">elif</span> <span class="pl-s1">number</span> <span class="pl-c1">%</span> <span class="pl-s1">x</span> <span class="pl-c1">==</span> <span class="pl-c1">0</span>: <span class="pl-c">#If number is evenly divisible by x, it can't be prime</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-checkprimality-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC10"><span class="pl-s1">sys</span>.<span class="pl-en">exit</span>(<span class="pl-s">"The number is not prime."</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-checkprimality-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC11"><span class="pl-s1">sys</span>.<span class="pl-en">exit</span>(<span class="pl-s">"The number is prime."</span>) <span class="pl-c">#number wasn't evenly divisible by any x, so it's prime</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-checkprimality-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC12"><span class="pl-k">elif</span> <span class="pl-s1">number</span> <span class="pl-c1">==</span> <span class="pl-c1">0</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-checkprimality-py-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC13"><span class="pl-s1">sys</span>.<span class="pl-en">exit</span>(<span class="pl-s">"The number is not prime."</span>) <span class="pl-c">#According to the Google, 0 is not prime</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="14" id="file-checkprimality-py-L14"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC14"><span class="pl-k">else</span>:<span class="pl-c">#if number is less than 0, the number is not prime (according to the Google).</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="15" id="file-checkprimality-py-L15"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC15"><span class="pl-s1">sys</span>.<span class="pl-en">exit</span>(<span class="pl-s">"The number is not prime."</span>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/evamvid/4ada99be543f08280fb0/raw/6d497872cdf8ce6f2b45731f1d6877b23baef995/checkprimality.py">view raw</a><a href="https://gist.github.com/evamvid/4ada99be543f08280fb0#file-checkprimality-py">checkprimality.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>This solution doesn’t use functions, but does use list comprehensions, which are always fun. Thanks to Carlos for this solution. The interesting thing here is the observation that when you want to check if a number is prime, all you need to do is check the numbers from 2 to the square root of the number. This is because the pair of numbers that are both the largest factors of the number are<span> </span><code class="highlighter-rouge">square root of x</code><span> </span>and<span> </span><code class="highlighter-rouge">square root of x</code>. Otherwise, the number you are checking for can be found by finding the corresponding factor and checking it.</p>
<div class="gist" id="gist19197315">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-gistfile1-txt">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-txt-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC1"># Assumes that "a" contains an integer &gt; 2 whose primality needs to be verified</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-txt-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC2"># The algorithm builds a list of factors including the number 2 and all odd numbers</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-gistfile1-txt-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC3"># up to the square root of "a", and then checks if any of those numbers divides "a"</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-gistfile1-txt-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC4"># without a remainder - if so then "a" is not prime, else it is</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-gistfile1-txt-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC5">if sum([ True if a%factor == 0 else False for factor in ( [2] + list(range(3,int(math.sqrt(a))+1,2) )) ]):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-gistfile1-txt-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC6">print("Number is composite")</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-gistfile1-txt-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC7">else:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-gistfile1-txt-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC8">print("Number is prime")</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/cescapa/c655e8e0c1558660150f/raw/d8d19ce0dd06a17f1db5c3140e641af6af2c35bb/gistfile1.txt">view raw</a><a href="https://gist.github.com/cescapa/c655e8e0c1558660150f#file-gistfile1-txt">gistfile1.txt</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>Another solution is a clean, short solution that uses list comprehensions.</p>
<div class="gist" id="gist26292207">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-ex11-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-ex11-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC1"><span class="pl-s1">num</span> <span class="pl-c1">=</span> <span class="pl-en">int</span>(<span class="pl-en">raw_input</span>(<span class="pl-s">'Insert a number: '</span>))</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-ex11-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC2"><span class="pl-s1">a</span> <span class="pl-c1">=</span> [<span class="pl-s1">x</span> <span class="pl-k">for</span> <span class="pl-s1">x</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-c1">2</span>, <span class="pl-s1">num</span>) <span class="pl-k">if</span> <span class="pl-s1">num</span> <span class="pl-c1">%</span> <span class="pl-s1">x</span> <span class="pl-c1">==</span> <span class="pl-c1">0</span>]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-ex11-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC3"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-ex11-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC4"><span class="pl-k">def</span> <span class="pl-en">is_prime</span>(<span class="pl-s1">n</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-ex11-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC5"><span class="pl-k">if</span> <span class="pl-s1">num</span> <span class="pl-c1">&gt;</span> <span class="pl-c1">1</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-ex11-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC6"><span class="pl-k">if</span> <span class="pl-en">len</span>(<span class="pl-s1">a</span>) <span class="pl-c1">==</span> <span class="pl-c1">0</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-ex11-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC7"><span class="pl-k">print</span> <span class="pl-s">'prime'</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-ex11-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC8"><span class="pl-k">else</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-ex11-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC9"><span class="pl-k">print</span> <span class="pl-s">'NOT prime'</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-ex11-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC10"><span class="pl-k">else</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-ex11-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC11"><span class="pl-k">print</span> <span class="pl-s">'NOT prime'</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-ex11-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC12"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-ex11-py-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC13"><span class="pl-en">is_prime</span>(<span class="pl-s1">num</span>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/34620e5c9feeec8824df/raw/bafb93884dfb2ce89bc0ad47e0f0826bc2e05172/ex11.py">view raw</a><a href="https://gist.github.com/anonymous/34620e5c9feeec8824df#file-ex11-py">ex11.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<div id="share">Share the fun!</div>
<div></div>
<div><span>檢查基本功能解決方案</span>
<h4 id="exercise-11"><a href="https://www.practicepython.org/exercise/2014/04/16/11-check-primality-functions.html"><span><span>練習11</span></span></a></h4>
<h4><span><span>向用戶詢問一個數字，並確定該數字是否為質數。</span><span>（對於那些忘記的人，質數是沒有除數的數。）</span><span>您可以（並且應該！）使用</span></span><a href="https://www.practicepython.org/exercise/2014/02/26/04-divisors.html"><span><span>練習4</span></span></a><span><span>的答案</span><span>來幫助您。</span></span></h4>
<span><span>樣品溶液</span></span>
<p><span><span>解決此問題的方法有很多，因此這裡有一個示例解決方案：</span></span></p>
<p><span><span>這是解決問題的功能的不同細分。</span><span>三個</span></span><code class="highlighter-rouge">'''</code><span><span>標記</span><span>之間的字符串</span><span>是代碼中的註釋，用於描述每個函數的功能。</span></span></p>
<div class="gist" id="gist11196563">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-prime_check-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-prime_check-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC1"><span class="pl-k"><span><span>def </span></span></span> <span class="pl-en"><span><span>get_number</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>提示</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-prime_check-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC2"><span class="pl-s"><span><span>'''返回輸入的整數值。</span><span>提示顯示文字'''</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-prime_check-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC3"><span class="pl-k"><span><span>返回</span></span></span> <span class="pl-en"><span><span>int</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>輸入</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>提示</span></span></span><span><span>））</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-prime_check-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC4"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-prime_check-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC5"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-prime_check-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC6"><span class="pl-k"><span><span>def </span></span></span> <span class="pl-en"><span><span>is_prime</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>number</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-prime_check-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC7"><span class="pl-s"><span><span>'''返回質數為True，否則為False'''</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-prime_check-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC8"><span class="pl-c"><span><span>＃邊緣案例</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-prime_check-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC9"><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>數字</span></span></span> <span class="pl-c1"><span><span>== </span></span></span> <span class="pl-c1"><span><span>1</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-prime_check-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC10"><span class="pl-s1"><span><span>素數</span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-c1"><span><span>假</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-prime_check-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC11"><span class="pl-k"><span><span>elif的</span></span></span> <span class="pl-s1"><span><span>數目</span></span></span> <span class="pl-c1"><span><span>== </span></span></span> <span class="pl-c1"><span><span>2</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-prime_check-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC12"><span class="pl-s1"><span><span>素數</span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-c1"><span><span>真</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-prime_check-py-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC13"><span class="pl-c"><span><span>＃所有其他素數 </span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="14" id="file-prime_check-py-L14"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC14"><span class="pl-k"><span><span>其他</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="15" id="file-prime_check-py-L15"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC15"><span class="pl-s1"><span><span>素數</span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-c1"><span><span>真</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="16" id="file-prime_check-py-L16"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC16"><span class="pl-k"><span><span>用於</span></span></span> <span class="pl-s1"><span><span>check_number</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>2</span></span></span><span><span>，（</span></span><span class="pl-s1"><span><span>數</span></span></span> <span class="pl-c1"><span><span>/ </span></span></span> <span class="pl-c1"><span><span>2</span></span></span><span><span>）</span></span><span class="pl-c1"><span><span>+ </span></span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="17" id="file-prime_check-py-L17"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC17"><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>數字</span></span></span> <span class="pl-c1"><span><span>％</span></span></span> <span class="pl-s1"><span><span>check_number </span></span></span> <span class="pl-c1"><span><span>== </span></span></span> <span class="pl-c1"><span><span>0</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="18" id="file-prime_check-py-L18"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC18"><span class="pl-s1"><span><span>素數</span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-c1"><span><span>假</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="19" id="file-prime_check-py-L19"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC19"><span class="pl-k"><span><span>打破</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="20" id="file-prime_check-py-L20"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC20"><span class="pl-k"><span><span>返回</span></span></span> <span class="pl-s1"><span><span>素數</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="21" id="file-prime_check-py-L21"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC21"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="22" id="file-prime_check-py-L22"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC22"><span class="pl-k"><span><span>def </span></span></span> <span class="pl-en"><span><span>print_prime</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>number</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="23" id="file-prime_check-py-L23"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC23"><span class="pl-s1"><span><span>素數</span></span></span> <span class="pl-c1"><span><span>= </span></span></span> <span class="pl-en"><span><span>is_prime</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>數字</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="24" id="file-prime_check-py-L24"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC24"><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>素數</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="25" id="file-prime_check-py-L25"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC25"><span class="pl-s1"><span><span>描述符</span></span></span> <span class="pl-c1"><span><span>= </span></span></span> <span class="pl-s"><span><span>“”</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="26" id="file-prime_check-py-L26"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC26"><span class="pl-k"><span><span>其他</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="27" id="file-prime_check-py-L27"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC27"><span class="pl-s1"><span><span>描述符</span></span></span> <span class="pl-c1"><span><span>= </span></span></span> <span class="pl-s"><span><span>“不是”</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="28" id="file-prime_check-py-L28"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC28"><span class="pl-en"><span><span>print</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>number</span></span></span><span><span>，</span></span><span class="pl-s"><span><span>“ is”</span></span></span><span><span>，</span></span><span class="pl-s1"><span><span>描述符</span></span></span><span><span>，</span></span><span class="pl-s"><span><span>“ prime。”</span></span></span><span><span>，</span></span><span class="pl-s1"><span><span>sep </span></span></span> <span class="pl-c1"><span><span>= </span></span></span> <span class="pl-s"><span><span>“”</span></span></span><span><span>，</span></span><span class="pl-s1"><span><span>end </span></span></span> <span class="pl-c1"><span><span>= </span></span></span> <span class="pl-s"><span><span>“ </span></span><span class="pl-cce"><span><span>\ n </span></span></span><span class="pl-cce"><span><span>\ n</span></span></span><span><span> ”</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="29" id="file-prime_check-py-L29"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC29"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="30" id="file-prime_check-py-L30"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC30"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="31" id="file-prime_check-py-L31"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC31"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="32" id="file-prime_check-py-L32"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC32"><span class="pl-c"><span><span>＃永不結束循環</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="33" id="file-prime_check-py-L33"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC33"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="34" id="file-prime_check-py-L34"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC34"><span class="pl-k"><span><span>而</span></span></span> <span class="pl-c1"><span><span>1 </span></span></span> <span class="pl-c1"><span><span>== </span></span></span> <span class="pl-c1"><span><span>1時</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="35" id="file-prime_check-py-L35"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC35"><span class="pl-en"><span><span>print_prime</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>get_number</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“輸入要檢查的數字</span></span></span><span><span class="pl-en"><span>。Ctl </span></span><span class="pl-s"><span>-C退出。”</span></span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="36" id="file-prime_check-py-L36"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC36"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="37" id="file-prime_check-py-L37"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC37"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="38" id="file-prime_check-py-L38"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC38"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="39" id="file-prime_check-py-L39"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC39"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/JamieMacIver/11196563/raw/a16d5762b4089d33e34650a22adcdf3426fffe7e/prime_check.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/JamieMacIver/11196563#file-prime_check-py"><span><span>prime_check.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>這是不使用函數的解決方案。</span><span>這也是不使用功能即可完成給定任務的正確解決方案。</span></span></p>
<div class="gist" id="gist11074742">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-checkprimality-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-checkprimality-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC1"><span class="pl-k"><span><span>導入</span></span></span> <span class="pl-s1"><span><span>系統</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-checkprimality-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC2"><span class="pl-s1"><span><span>數字</span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-en"><span><span>輸入</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“請輸入數字” </span></span></span> <span class="pl-c1"><span><span>+ </span></span></span> <span class="pl-s"><span><span>“ </span></span><span class="pl-cce"><span><span>\ n</span></span></span><span><span> ” </span></span></span> <span class="pl-c1"><span><span>+ </span></span></span> <span class="pl-s"><span><span>“ &gt;&gt;&gt;”</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-checkprimality-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC3"><span class="pl-s1"><span><span>數字</span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-en"><span><span>整數</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>數字</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-checkprimality-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC4"><span class="pl-s1"><span><span>prime </span></span></span> <span class="pl-c1"><span><span>= </span></span></span> <span class="pl-c1"><span><span>False </span></span></span> <span class="pl-c"><span><span>＃初始化布爾值為true false，默認為false</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-checkprimality-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC5"><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>數字</span></span></span> <span class="pl-c1"><span><span>&gt; </span></span></span> <span class="pl-c1"><span><span>0</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-checkprimality-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC6"><span class="pl-k"><span><span>對於</span></span></span> <span class="pl-s1"><span><span>X</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>2</span></span></span><span><span>，</span></span><span class="pl-s1"><span><span>數</span></span></span> <span class="pl-c1"><span><span>- </span></span></span> <span class="pl-c1"><span><span>1</span></span></span><span><span>）： </span></span><span class="pl-c"><span><span>＃</span><span>此範圍排除數和1，這兩個數是整除</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-checkprimality-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC7"><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>數字</span></span></span> <span class="pl-c1"><span><span>％</span></span></span> <span class="pl-s1"><span><span>x </span></span></span> <span class="pl-c1"><span><span>！= </span></span></span> <span class="pl-c1"><span><span>0</span></span></span><span><span>：＃</span></span><span class="pl-c"><span><span>如果數字不能被x整除，則從下一個開始</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-checkprimality-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC8"><span class="pl-k"><span><span>繼續</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-checkprimality-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC9"><span class="pl-k"><span><span>elif </span></span></span> <span class="pl-s1"><span><span>number </span></span></span> <span class="pl-c1"><span><span>％</span></span></span> <span class="pl-s1"><span><span>x </span></span></span> <span class="pl-c1"><span><span>== </span></span></span> <span class="pl-c1"><span><span>0</span></span></span><span><span>：＃</span></span><span class="pl-c"><span><span>如果數字可以被x整除，則不能為素數</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-checkprimality-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC10"><span class="pl-s1"><span><span>sys</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>退出</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“數字不是素數。”</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-checkprimality-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC11"><span class="pl-s1"><span><span>sys</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>exit</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“數字是質數。”</span></span></span><span><span>）</span><span class="pl-c"><span># </span></span><span class="pl-s"><span>number</span></span></span><span class="pl-c"><span><span>不能被任何x整除，所以它是質數</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-checkprimality-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC12"><span class="pl-k"><span><span>elif的</span></span></span> <span class="pl-s1"><span><span>數目</span></span></span> <span class="pl-c1"><span><span>== </span></span></span> <span class="pl-c1"><span><span>0</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-checkprimality-py-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC13"><span class="pl-s1"><span><span>sys</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>exit</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“數字不是素數。”</span></span></span><span><span>）</span></span><span class="pl-c"><span><span>#Google表示，0不是素數</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="14" id="file-checkprimality-py-L14"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC14"><span class="pl-k"><span><span>else</span></span></span><span><span>：</span></span><span class="pl-c"><span><span>＃如果數字小於0，則該數字不是素數（根據Google）。</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="15" id="file-checkprimality-py-L15"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC15"><span class="pl-s1"><span><span>sys</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>退出</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“數字不是素數。”</span></span></span><span><span>）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/evamvid/4ada99be543f08280fb0/raw/6d497872cdf8ce6f2b45731f1d6877b23baef995/checkprimality.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/evamvid/4ada99be543f08280fb0#file-checkprimality-py"><span><span>checkprimality.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>該解決方案不使用函數，但是使用列表推導，這總是很有趣。</span><span>感謝卡洛斯的解決方案。</span><span>有趣的是，觀察到當您要檢查數字是否為質數時，只需檢查2到該數字的平方根之間的數字即可。</span><span>這是因為這兩個都是最大數字的數字對</span></span><code class="highlighter-rouge">square root of x</code><span><span>和</span></span><code class="highlighter-rouge">square root of x</code><span><span>。</span><span>否則，可以通過查找相應的因子並進行檢查來找到要檢查的編號。</span></span></p>
<div class="gist" id="gist19197315">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-gistfile1-txt">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-txt-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC1"><span><span>＃假設“ a”包含一個大於2的整數，需要驗證其素數</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-txt-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC2"><span><span>＃算法會建立一個因子列表，包括數字2和所有奇數 </span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-gistfile1-txt-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC3"><span><span>＃直到“ a”的平方根，然後檢查這些數字中的任何一個是否除以“ a” </span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-gistfile1-txt-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC4"><span><span>＃沒有餘數-如果是，則“ a”不是質數，否則為</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-gistfile1-txt-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC5"><span><span>如果sum（[如果a％factor == 0，則為True，否則（[2] + list（range（3，int（math.sqrt（a））+ 1,2）））中的因子為False]））： </span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-gistfile1-txt-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC6"><span><span> print（“數字是合成的”）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-gistfile1-txt-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC7"><span><span>其他： </span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-gistfile1-txt-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC8"><span><span> 打印（“數字是素數”）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/cescapa/c655e8e0c1558660150f/raw/d8d19ce0dd06a17f1db5c3140e641af6af2c35bb/gistfile1.txt"><span><span>查看原始</span></span></a><a href="https://gist.github.com/cescapa/c655e8e0c1558660150f#file-gistfile1-txt"><span><span>gistfile1.txt</span></span></a><span><span><span> </span>與❤主辦</span></span><a href="https://github.com/"><span><span>的GitHub</span></span></a></div>
</div>
</div>
<p><span><span>另一種解決方案是使用列表推導的簡潔的簡短解決方案。</span></span></p>
<div class="gist" id="gist26292207">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-ex11-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-ex11-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC1"><span class="pl-s1"><span><span>num </span></span></span> <span class="pl-c1"><span><span>= </span></span></span> <span class="pl-en"><span><span>int</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>raw_input</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>'插入數字：'</span></span></span><span><span>））</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-ex11-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC2"><span class="pl-s1"><span><span>a </span></span></span> <span class="pl-c1"><span><span>=</span></span></span><span><span> [ </span></span><span class="pl-s1"><span><span>x</span></span></span> <span class="pl-k"><span><span>表示</span></span></span> <span class="pl-s1"><span><span>x</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>2</span></span></span><span><span>，</span></span><span class="pl-s1"><span><span>num</span></span></span><span><span>）中，</span></span><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>num </span></span></span> <span class="pl-c1"><span><span>％</span></span></span> <span class="pl-s1"><span><span>x </span></span></span> <span class="pl-c1"><span><span>== </span></span></span> <span class="pl-c1"><span><span>0</span></span></span><span><span> ]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-ex11-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC3"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-ex11-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC4"><span class="pl-k"><span><span>def </span></span></span> <span class="pl-en"><span><span>is_prime</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>n</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-ex11-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC5"><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>num </span></span></span> <span class="pl-c1"><span><span>&gt; </span></span></span> <span class="pl-c1"><span><span>1</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-ex11-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC6"><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-en"><span><span>len</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>a</span></span></span><span><span>）</span></span><span class="pl-c1"><span><span>== </span></span></span> <span class="pl-c1"><span><span>0</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-ex11-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC7"><span class="pl-k"><span><span>打印</span></span></span> <span class="pl-s"><span><span>'prime'</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-ex11-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC8"><span class="pl-k"><span><span>其他</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-ex11-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC9"><span class="pl-k"><span><span>打印</span></span></span> <span class="pl-s"><span><span>“不素”</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-ex11-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC10"><span class="pl-k"><span><span>其他</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-ex11-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC11"><span class="pl-k"><span><span>打印</span></span></span> <span class="pl-s"><span><span>“不素”</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-ex11-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC12"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-ex11-py-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC13"><span class="pl-en"><span><span>is_prime</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>num</span></span></span><span><span>）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/34620e5c9feeec8824df/raw/bafb93884dfb2ce89bc0ad47e0f0826bc2e05172/ex11.py"><span><span>查看原始</span></span></a></div>
<h2 class="gist-meta"><span><span>P12 All solutions</span></span></h2>
List Ends Solutions
<div><i></i></div>
<a href="https://www.practicepython.org/exercise/2014/04/25/12-list-ends.html">Exercise 12</a>
<p>Write a program that takes a list of numbers (for example,<span> </span><code class="highlighter-rouge">a = [5, 10, 15, 20, 25]</code>) and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function.</p>
Sample solution
<div class="gist" id="gist11708295">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-gistfile1-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-py-LC1"><span class="pl-k">def</span> <span class="pl-en">list_ends</span>(<span class="pl-s1">a_list</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-py-LC2"><span class="pl-k">return</span> [<span class="pl-s1">a_list</span>[<span class="pl-c1">0</span>], <span class="pl-s1">a_list</span>[<span class="pl-en">len</span>(<span class="pl-s1">a_list</span>)<span class="pl-c1">-</span><span class="pl-c1">1</span>]]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/c3b1ff3420bc3bd68c4d/raw/d1322b914f164409dbeb2442d810dc073a63573a/gistfile1.py">view raw</a></div>
</div>
</div>
<div class="gist-meta"><a href="https://www.practicepython.org/exercise/2014/04/25/12-list-ends.html"><span>練習12</span></a>
<p><span><span>編寫一個程序，該程序接受一個數字列表（例如</span></span><code class="highlighter-rouge">a = [5, 10, 15, 20, 25]</code><span><span>），並製作一個僅包含給定列表的第一個和最後一個元素的新列表。</span><span>為了練習，請在函數內編寫此代碼。</span></span></p>
<span><span>樣品溶液</span></span>
<div class="gist" id="gist11708295">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-gistfile1-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-py-LC1"><span class="pl-k"><span><span>def </span></span></span> <span class="pl-en"><span><span>list_ends</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>a_list</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-py-LC2"><span class="pl-k"><span><span>返回</span></span></span><span><span>[</span></span><span class="pl-s1"><span><span>的a_list</span></span></span><span><span> [ </span></span><span class="pl-c1"><span><span>0</span></span></span><span><span> ]，</span></span><span class="pl-s1"><span><span>的a_list</span></span></span><span><span> [ </span></span><span class="pl-en"><span><span>LEN</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>的a_list</span></span></span><span><span>）</span></span><span class="pl-c1"><span><span>- </span></span></span><span class="pl-c1"><span><span>1</span></span></span><span><span> ]]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/c3b1ff3420bc3bd68c4d/raw/d1322b914f164409dbeb2442d810dc073a63573a/gistfile1.py"><span><span>查看原始</span></span></a></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>